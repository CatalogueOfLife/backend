pipeline {
    agent any
    tools {
      maven 'Maven 3.8.5'
      jdk 'OpenJDK11'
    }
    options {
        ansiColor('xterm')
    }
    environment {
        CLB_URL = credentials('col-prod-db')
    }
    parameters {
        string(name: 'GIT_REPO', defaultValue: 'https://github.com/catalogueoflife/backend.git', description: 'GitHub repository URL')
        string(name: 'GIT_BRANCH', defaultValue: 'master', description: 'Branch to checkout')
        string(name: 'APP_ARTIFACT', defaultValue: 'matching-ws', description: 'Branch to checkout')
        string(name: 'CLB_DATASET_ID', defaultValue: '127379', description: 'Branch to checkout')
        string(name: 'CLB_API_URL', defaultValue: 'https://api.checklistbank.org', description: 'Branch to checkout')
        string(name: 'CLB_IUCN_DATASET_ID', defaultValue: '', description: 'Branch to checkout')
        string(name: 'CLB_IDENTIFIER_DATASET_IDS', defaultValue: '', description: 'Branch to checkout')
        string(name: 'EXTRA_RUN_ARGS', defaultValue: '', description: 'Branch to checkout')
        string(name: 'JVM_OPTIONS', defaultValue: '-Xmx2g -Xmx1g', description: 'Branch to checkout')
        string(name: 'DOCKER_TAG', defaultValue: 'afd-latest', description: 'Branch to checkout')
    }

    stages {
        stage('Maven build matching-ws)') {
          steps {
              git branch: 'feature/nested_sets', url: 'https://github.com/catalogueoflife/backend.git'
              sh 'cd matching-ws && mvn clean install -DskipTests'
          }
        }

        stage('Generate lucene index)') {
          steps {
            script {
              withCredentials([
                        usernamePassword(credentialsId: 'col', usernameVariable: 'CLB_USER', passwordVariable: 'CLB_PASSWORD')]) {
                sh  "rm -Rf ${env.WORKSPACE}/matching-ws/index-build"
                sh  "java $JVM_OPTIONS -jar ${env.WORKSPACE}/matching-ws/target/matching-ws-1.0-SNAPSHOT-exec.jar  \
                     --spring.cloud.bootstrap.location=${env.WORKSPACE}/matching-ws/src/main/resources/bootstrap.yaml \
                     --mode=INDEX \
                     --server.port=0 \
                     --index.path=${env.WORKSPACE}/matching-ws/index-build/data/$APP_ARTIFACT/index \
                     --export.path=${env.WORKSPACE}/matching-ws/index-build/data/$APP_ARTIFACT/exports \
                     --clb.dataset.id=$CLB_DATASET_ID \
                     --clb.identifier.dataset.ids=$CLB_IDENTIFIER_DATASET_IDS \
                     --clb.iucn.dataset.id=$CLB_IUCN_DATASET_ID \
                     --clb.url=$CLB_URL \
                     --clb.user=$CLB_USER \
                     --clb.password=$CLB_PASSWORD $EXTRA_RUN_ARGS && \
                     tar zcvf ${env.WORKSPACE}/matching-ws/index-build/data/$APP_ARTIFACT/exports.tgz ${env.WORKSPACE}/matching-ws/index-build/data/$APP_ARTIFACT/exports && \
                     rm -Rf ${env.WORKSPACE}/matching-ws/index-build/data/$APP_ARTIFACT/exports"
                }
              }
            }
          }

        stage('Setup index build artefacts') {
          steps {
            sh "mkdir -p ${env.WORKSPACE}/matching-ws/index-build/opt/gbif/${env.APP_ARTIFACT}"
            sh "echo 'spring.cloud.zookeeper.discovery.metadata.timestamp=12345678' > ${env.WORKSPACE}/matching-ws/index-build/timestamp.properties"
            sh "curl -o ${env.WORKSPACE}/matching-ws/index-build/opt/gbif/matching-ws/dataset.json ${env.CLB_API_URL}/dataset/${env.CLB_DATASET_ID}.json"
            sh "curl -o ${env.WORKSPACE}/matching-ws/index-build/opt/gbif/matching-ws/git.json -H 'Accept: application/vnd.github+json' \"https://api.github.com/repos/catalogueoflife/backend/commits/\$(git rev-parse HEAD)\""
            sh "cp ${env.WORKSPACE}/matching-ws/target/matching-ws-*-exec.jar ${env.WORKSPACE}/matching-ws/index-build/opt/gbif/${env.APP_ARTIFACT}/app.jar"
            sh "cp ${env.WORKSPACE}/matching-ws/src/main/resources/bootstrap.yaml ${env.WORKSPACE}/matching-ws/index-build/opt/gbif/${env.APP_ARTIFACT}/bootstrap.yaml"
          }
        }

        stage('Build Docker Image for linux/amd64') {
              steps {
                  script {
                      // Run Docker build with parameters
                      sh "docker build -f matching-ws/Dockerfile-image --platform linux/amd64 --build-arg INDEX_BUILD_PATH=matching-ws/index-build . -t docker.gbif.org/matching-ws:${DOCKER_TAG}-amd64"
                      sh "docker push docker.gbif.org/matching-ws:${DOCKER_TAG}-amd64"
                      sh "docker tag docker.gbif.org/matching-ws:${DOCKER_TAG}-amd64 docker.gbif.org/matching-ws:${DOCKER_TAG}"
                      sh "docker push docker.gbif.org/matching-ws:${DOCKER_TAG}"
                      sh "docker rmi docker.gbif.org/matching-ws:${DOCKER_TAG} docker.gbif.org/matching-ws:${DOCKER_TAG}-amd64"
                  }
              }
        }

        stage('Build Docker Image for linux/arm64') {
              steps {
                  script {
                      // Run Docker build with parameters
                      sh "docker build -f matching-ws/Dockerfile-image --platform linux/arm64 --build-arg INDEX_BUILD_PATH=matching-ws/index-build . -t docker.gbif.org/matching-ws:${DOCKER_TAG}-arm64"
                      sh "docker push docker.gbif.org/matching-ws:${DOCKER_TAG}-arm64"
                      sh "docker rmi docker.gbif.org/matching-ws:${DOCKER_TAG}-arm64"
                  }
              }
        }
    }
}
