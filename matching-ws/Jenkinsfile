pipeline {
    agent any
    tools {
      maven 'Maven 3.8.5'
      jdk 'OpenJDK17'
    }
    options {
        ansiColor('xterm')
    }
    environment {
        CLB_URL = credentials('col-prod-db')
    }
    parameters {
        string(name: 'GIT_REPO', defaultValue: 'https://github.com/catalogueoflife/backend.git', description: 'GitHub repository URL')
        string(name: 'GIT_BRANCH', defaultValue: 'master', description: 'Branch to checkout')
        string(name: 'APP_ARTIFACT', defaultValue: 'matching-ws', description: 'The app artefact name')
        string(name: 'CLB_DATASET_ID', defaultValue: '', description: 'Checklistbank dataset ID')
        string(name: 'CLB_API_URL', defaultValue: 'https://api.checklistbank.org', description: 'Checklistbank API URL')
        string(name: 'CLB_IUCN_DATASET_ID', defaultValue: '53131', description: 'Checklistbank dataset ID for IUCN')
        string(name: 'CLB_IDENTIFIER_DATASET_IDS', defaultValue: '', description: 'Comma separated list of Checklistbank dataset IDs')
        string(name: 'EXTRA_RUN_ARGS', defaultValue: '', description: 'Additional run args for docker')
        string(name: 'JVM_OPTIONS', defaultValue: '-Xmx2g -Xmx1g', description: 'JVM options for docker')
        string(name: 'DOCKER_TAG', defaultValue: 'worms', description: 'The docker tag to use')
        booleanParam(name: 'DOCKER_TAG_LATEST', defaultValue: true, description: 'Whether to great latest tag')
    }

    stages {
        stage('Maven build matching-ws') {
          steps {
              sh "cd matching-ws && git checkout $GIT_BRANCH && mvn clean install -DskipTests"
          }
        }

        stage('Generate lucene index') {
          steps {
            script {
              withCredentials([
                        usernamePassword(credentialsId: 'col', usernameVariable: 'CLB_USER', passwordVariable: 'CLB_PASSWORD')]) {
                sh  "rm -Rf ${env.WORKSPACE}/matching-ws/index-build"
                sh  "java $JVM_OPTIONS -jar ${env.WORKSPACE}/matching-ws/target/matching-ws-*-exec.jar  \
                     --spring.cloud.bootstrap.location=${env.WORKSPACE}/matching-ws/src/main/resources/bootstrap.yml \
                     --mode=INDEX \
                     --server.port=0 \
                     --index.path=${env.WORKSPACE}/matching-ws/index-build/data/$APP_ARTIFACT/index \
                     --export.path=${env.WORKSPACE}/matching-ws/index-build/data/$APP_ARTIFACT/exports \
                     --clb.dataset.id=$CLB_DATASET_ID \
                     --clb.identifier.dataset.ids=$CLB_IDENTIFIER_DATASET_IDS \
                     --clb.iucn.dataset.id=$CLB_IUCN_DATASET_ID \
                     --clb.url=$CLB_URL \
                     --clb.user=$CLB_USER \
                     --clb.password=$CLB_PASSWORD $EXTRA_RUN_ARGS && \
                     tar zcvf ${env.WORKSPACE}/matching-ws/index-build/data/$APP_ARTIFACT/exports.tgz ${env.WORKSPACE}/matching-ws/index-build/data/$APP_ARTIFACT/exports && \
                     rm -Rf ${env.WORKSPACE}/matching-ws/index-build/data/$APP_ARTIFACT/exports"
                }
              }
            }
          }

        stage('Setup index build artefacts') {
          steps {
            sh "mkdir -p ${env.WORKSPACE}/matching-ws/index-build/code/conf"
            sh "echo \"spring.cloud.zookeeper.discovery.metadata.timestamp=\$(date +%s)\" > ${env.WORKSPACE}/matching-ws/index-build/timestamp.properties"
            sh "curl -o ${env.WORKSPACE}/matching-ws/index-build/code/dataset.json ${env.CLB_API_URL}/dataset/${env.CLB_DATASET_ID}.json"
            sh "curl -o ${env.WORKSPACE}/matching-ws/index-build/code/git.json -H 'Accept: application/vnd.github+json' \"https://api.github.com/repos/catalogueoflife/backend/commits/\$(git rev-parse HEAD)\""
            sh "cp ${env.WORKSPACE}/matching-ws/target/matching-ws-*-exec.jar ${env.WORKSPACE}/matching-ws/index-build/code/app.jar"
            sh "cp ${env.WORKSPACE}/matching-ws/src/main/resources/bootstrap.yml ${env.WORKSPACE}/matching-ws/index-build/code/conf/bootstrap.yml"
            sh "cp ${env.WORKSPACE}/matching-ws/src/main/resources/application.yml ${env.WORKSPACE}/matching-ws/index-build/code/conf/application.yml"
          }
        }

        stage('Build Docker Image for linux/amd64') {
              steps {
                  script {
                      PLATFORM = "amd64"
                      TIMESTAMP = new Date().format("yyyyMMdd-HHmmss")
                      FULL_TAG = "${DOCKER_TAG}-${PLATFORM}-${CLB_DATASET_ID}-${TIMESTAMP}"

                      // Run Docker build with parameters
                      sh "docker build -f matching-ws/Dockerfile-image --platform linux/${PLATFORM} --build-arg INDEX_BUILD_PATH=matching-ws/index-build . -t docker.gbif.org/matching-ws:${FULL_TAG}"
                      sh "docker push docker.gbif.org/matching-ws:${FULL_TAG}"

                      // Tag and push the latest version if required
                      if (env.DOCKER_TAG_LATEST) {
                          sh "docker tag docker.gbif.org/matching-ws:${FULL_TAG} docker.gbif.org/matching-ws:${DOCKER_TAG}-${PLATFORM}-latest"
                          sh "docker push docker.gbif.org/matching-ws:${DOCKER_TAG}-${PLATFORM}-latest"
                          sh "docker tag docker.gbif.org/matching-ws:${DOCKER_TAG}-${PLATFORM}-latest docker.gbif.org/matching-ws:${DOCKER_TAG}-latest"
                          sh "docker push docker.gbif.org/matching-ws:${DOCKER_TAG}-latest"
                          sh "docker rmi docker.gbif.org/matching-ws:${DOCKER_TAG}-${PLATFORM}-latest docker.gbif.org/matching-ws:${DOCKER_TAG}-latest"
                      }

                      sh "docker rmi docker.gbif.org/matching-ws:${FULL_TAG}"
                  }
              }
        }

        stage('Build Docker Image for linux/arm64') {
              steps {
                  script {
                      PLATFORM = "arm64"
                      TIMESTAMP = new Date().format("yyyyMMdd-HHmmss")
                      FULL_TAG = "${DOCKER_TAG}-${PLATFORM}-${CLB_DATASET_ID}-${TIMESTAMP}"

                      // Run Docker build with parameters
                      sh "docker build -f matching-ws/Dockerfile-image --platform linux/${PLATFORM} --build-arg INDEX_BUILD_PATH=matching-ws/index-build . -t docker.gbif.org/matching-ws:${FULL_TAG}"
                      sh "docker push docker.gbif.org/matching-ws:${FULL_TAG}"

                      // Tag and push the latest version if required
                      if (env.DOCKER_TAG_LATEST) {
                          sh "docker tag docker.gbif.org/matching-ws:${FULL_TAG} docker.gbif.org/matching-ws:${DOCKER_TAG}-${PLATFORM}-latest"
                          sh "docker push docker.gbif.org/matching-ws:${DOCKER_TAG}-${PLATFORM}-latest"
                          sh "docker rmi docker.gbif.org/matching-ws:${DOCKER_TAG}-${PLATFORM}-latest"
                      }

                      sh "docker rmi docker.gbif.org/matching-ws:${FULL_TAG}"
                  }
              }
        }
    }
}
