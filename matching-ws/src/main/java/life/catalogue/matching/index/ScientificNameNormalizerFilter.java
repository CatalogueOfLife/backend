package life.catalogue.matching.index;

import java.io.IOException;
import life.catalogue.common.tax.SciNameNormalizer;
import org.apache.lucene.analysis.TokenFilter;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;

/**
 * Lucene filter that uses the SciNameNormalizer util to normalize scientific names. By default, it
 * strongly normalizes all name tokens as generated by the Standard- or WhitespaceTokenizer.
 */
public class ScientificNameNormalizerFilter extends TokenFilter {
  private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);

  public ScientificNameNormalizerFilter(TokenStream input) {
    super(input);
  }

  @Override
  public final boolean incrementToken() throws IOException {
    if (!input.incrementToken()) return false;

    String term = termAtt.toString();
    if (SciNameNormalizer.hasContent(term)) {

      // porting notes: this section was simplified, as it was always called with
      // normMonomials=true, stemming=true
      // fullNameTokens=true is the same as normMonomials=true
      // String normed = fullNameTokens ? SciNameNormalizer.normalize(term, stemming) :
      // SciNameNormalizer.normalizeAll(term, stemming);
      String normed = SciNameNormalizer.normalize(term);
      termAtt.copyBuffer(normed.toCharArray(), 0, normed.length());
    }
    return true;
  }
}
