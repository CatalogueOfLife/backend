package life.catalogue.resources;

import life.catalogue.dw.auth.Roles;
import life.catalogue.portal.PortalPageRenderer;
import life.catalogue.portal.PortalPageRenderer.Environment;

import java.io.IOException;

import io.swagger.v3.oas.annotations.Hidden;
import jakarta.annotation.security.RolesAllowed;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;

/**
 * Dynamic data pages for the portal, served by templates generated by the portal Jekyll project.
 * The templates can be updated via the API to serve the latest pages when the portal project is build.
 */
@Path("/portal/{env}")
@Hidden
@SuppressWarnings("static-method")
@Consumes(MediaType.TEXT_HTML)
@Produces(MediaType.TEXT_HTML)
public class PortalResource {
  private final PortalPageRenderer renderer;

  public PortalResource(PortalPageRenderer renderer) {
    this.renderer = renderer;
  }

  @GET
  @Path("metadata")
  public Response metadata(@PathParam("env") Environment env) throws Exception {
    return renderer.renderMetadata(env, false);
  }

  @GET
  @Path("dataset/{id}")
  public Response datasource(@PathParam("env") Environment env, @PathParam("id") int id) throws Exception {
    return renderer.renderDatasource(id, env, false);
  }

  @GET
  @Path("taxon/{id}")
  public Response taxon(@PathParam("env") Environment env, @PathParam("id") String id) throws Exception {
    return renderer.renderTaxon(id, env, false);
  }

  @PUT
  @Path("{page}")
  @RolesAllowed({Roles.ADMIN})
  public void setTemplate(@PathParam("env") Environment env, @PathParam("page") String page, String template) throws IOException {
    renderer.store(env, parsePage(page), template);
  }

  private PortalPageRenderer.PortalPage parsePage(String page) {
    page = page.toUpperCase();
    if (page.equals("404")) {
      return PortalPageRenderer.PortalPage.NOT_FOUND;
    }
    try {
      return PortalPageRenderer.PortalPage.valueOf(page);
    } catch (IllegalArgumentException e){
      throw new NotFoundException("Page "+page+" does not exist");
    }
  }
}
