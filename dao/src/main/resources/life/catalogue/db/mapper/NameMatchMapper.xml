<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.NameMatchMapper">

  <resultMap id="nameMatchResultMap" type="NameMatch" autoMapping="true">
    <result property="type" column="type"/>
    <association property="name" javaType="IndexName" resultMap="life.catalogue.db.mapper.NamesIndexMapper.nameResultMap"/>
  </resultMap>

  <select id="exists" resultType="boolean">
    SELECT exists(
      SELECT name_id
      FROM name_match
      WHERE dataset_key = #{datasetKey}
    <if test="sectorKey != null">
      AND sector_key = #{sectorKey}
    </if>
    LIMIT 1
    )
  </select>

  <select id="get" resultMap="nameMatchResultMap">
    SELECT nm.type, <include refid="life.catalogue.db.mapper.NamesIndexMapper.SELECT"/>
    FROM name_match nm LEFT JOIN names_index n ON n.id=nm.index_id
    WHERE nm.dataset_key = #{key.datasetKey} AND nm.name_id = #{key.id}
  </select>

  <select id="getCanonicalNidx" resultType="integer">
    SELECT n.canonical_id
    FROM name_match nm LEFT JOIN names_index n ON n.id=nm.index_id
    WHERE nm.dataset_key = #{key.datasetKey} AND nm.name_id = #{key.id}
  </select>

  <select id="processSector" parameterType="map" resultMap="nameMatchResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
    SELECT nm.type, <include refid="life.catalogue.db.mapper.NamesIndexMapper.SELECT"/>
    FROM name_match nm LEFT JOIN names_index n ON n.id=nm.index_id
    WHERE nm.dataset_key = #{key.datasetKey} AND nm.sector_key = #{key.id}
  </select>

  <select id="processIndexIds" resultType="Integer" resultOrdered="true" fetchSize="10000" resultSetType="FORWARD_ONLY">
    SELECT DISTINCT index_id
    FROM name_match
    WHERE dataset_key = #{datasetKey}
    <if test="sectorKey != null">
      AND sector_key = #{sectorKey}
    </if>
  </select>

  <insert id="copyDataset" parameterType="map">
    INSERT INTO name_match (dataset_key,sector_key,type,index_id,name_id)
    SELECT #{newDatasetKey},nm.sector_key,nm.type,nm.index_id,coalesce(<if test="mapIds">m.id2,</if>nm.name_id)
    FROM name_match nm
    <if test="mapIds">
      LEFT JOIN idmap_name_${datasetKey} m ON m.id=nm.name_id
    </if>
    WHERE nm.dataset_key = #{datasetKey}
  </insert>

  <delete id="deleteOrphans" parameterType="map">
    DELETE FROM name_match nm
    WHERE dataset_key=#{datasetKey} AND NOT EXISTS (
      SELECT NULL FROM name n
      WHERE n.dataset_key=#{datasetKey} AND n.id = nm.name_id
    )
  </delete>

  <delete id="deleteByTemp" parameterType="map">
    DELETE FROM name_match
    USING _tmp_nu tmp
    WHERE dataset_key=#{datasetKey} AND name_id = tmp.nid
  </delete>

  <delete id="deleteBySector" parameterType="map">
    DELETE FROM name_match
    WHERE dataset_key=#{key.datasetKey} AND sector_key=#{key.id}
  </delete>

  <delete id="deleteByDataset" parameterType="map">
    DELETE FROM name_match
    WHERE dataset_key=#{datasetKey}
  </delete>

  <insert id="create" parameterType="map" useGeneratedKeys="false">
    INSERT INTO name_match (dataset_key,sector_key,type,index_id,name_id)
    VALUES (#{key.datasetKey}, #{sectorKey}, #{type}::MATCHTYPE, #{nidx}, #{key.id})
  </insert>

  <update id="update" parameterType="map">
    UPDATE name_match SET (type,index_id) = (#{type}::MATCHTYPE, #{nidx})
    WHERE dataset_key=#{key.datasetKey} AND name_id = #{key.id}
  </update>

  <delete id="delete" parameterType="map">
    DELETE FROM name_match
    WHERE dataset_key=#{key.datasetKey} AND name_id = #{key.id}
  </delete>

  <select id="countByDataset" resultType="integer">
    SELECT count(*)
    FROM name_match
    WHERE dataset_key = #{datasetKey}
  </select>

  <select id="countNidx" resultType="integer">
    SELECT count(*)
    FROM name_match nm JOIN names_index ni ON ni.id=nm.index_id
    WHERE ni.id=#{nidx} OR ni.canonical_id=#{nidx}
    <if test="datasetKey != null">
      AND nm.dataset_key = #{datasetKey}
    </if>
  </select>

  <update id="removeSectorKey" parameterType="map">
    UPDATE name_match SET sector_key = NULL
    WHERE dataset_key = #{key.datasetKey} AND sector_key = #{key.id}
  </update>

  <update id="truncate">
    TRUNCATE name_match CASCADE
  </update>
</mapper>
