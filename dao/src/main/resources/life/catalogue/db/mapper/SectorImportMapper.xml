<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.SectorImportMapper">

  <sql id="SELECT">
    si.state,
    si.dataset_key,
    si.sector_key,
    si.attempt,
    si.dataset_attempt,
    si.warnings,
    si.secondary_source_by_info_count,
    <include refid="life.catalogue.db.mapper.DatasetImportMapper.metricsCols">
      <property name="alias" value="si."/>
    </include>
  </sql>

  <sql id="COLS">
    state,
    dataset_key,
    sector_key,
    dataset_attempt,
    warnings,
    secondary_source_by_info_count,
    <include refid="life.catalogue.db.mapper.DatasetImportMapper.metricsCols">
      <property name="alias" value=""/>
    </include>
  </sql>

  <sql id="PROPS">
    #{imp.state}::IMPORTSTATE,
    #{imp.datasetKey},
    #{imp.sectorKey},
    #{imp.datasetAttempt},
    #{imp.warnings, typeHandler=life.catalogue.db.type2.StringCollectionArrayTypeHandler},
    #{imp.secondarySourceByInfoCount, typeHandler=life.catalogue.db.type2.HstoreInfoGroupCountTypeHandler}::hstore,
    <include refid="life.catalogue.db.mapper.DatasetImportMapper.metricsProps"/>
  </sql>

  <sql id="FROM">
    sector_import si
    <if test="subjectDatasetKey != null or datasetKey != null or _parameter.containsKey('current')">
      JOIN sector s ON s.id=si.sector_key AND s.dataset_key=si.dataset_key
    </if>
  </sql>

  <sql id="WHERE">
    <where>
      <if test="sectorKey != null">
        si.sector_key = #{sectorKey}
      </if>
      <if test="datasetKey != null">
        AND s.dataset_key = #{datasetKey}
      </if>
      <if test="subjectDatasetKey != null">
        AND s.subject_dataset_key = #{subjectDatasetKey}
      </if>
      <if test="states != null and !states.isEmpty()">
        AND si.state IN
        <foreach item="state" collection="states" open="(" separator="," close=")">
          #{state}::IMPORTSTATE
        </foreach>
      </if>
      <if test="modes != null and !modes.isEmpty()">
        AND s.mode IN
        <foreach item="mode" collection="modes" open="(" separator="," close=")">
          #{mode}::SECTOR_MODE
        </foreach>
      </if>
      <if test="_parameter.containsKey('current') and current != null and current">
        AND si.attempt=s.sync_attempt
      </if>
    </where>
  </sql>

  <resultMap id="sectorImportResultMap" type="SectorImport" autoMapping="true" extends="life.catalogue.db.mapper.DatasetImportMapper.importMetricsResultMap">
    <result property="warnings" column="warnings" typeHandler="life.catalogue.db.type2.StringCollectionArrayTypeHandler"/>
  </resultMap>

  <select id="get" resultMap="sectorImportResultMap">
    SELECT <include refid="SELECT"/>
    FROM sector_import si
    WHERE dataset_key=#{key.datasetKey} AND sector_key=#{key.id} AND attempt=#{attempt}
  </select>

  <select id="count" resultType="integer">
    SELECT count(*)
    FROM <include refid="FROM"/>
    <include refid="WHERE"/>
  </select>

  <select id="list" resultMap="sectorImportResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    <include refid="WHERE"/>
    ORDER BY coalesce(started, finished) DESC NULLS LAST, sector_key ASC, attempt DESC
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <insert id="create" parameterType="SectorImport">
    <selectKey keyProperty="imp.attempt" resultType="integer" order="BEFORE">
      <if test="imp.attempt &lt;= 0">SELECT coalesce(max(attempt)+1, 1) FROM sector_import WHERE sector_key=#{imp.sectorKey}</if>
      <if test="imp.attempt &gt; 0">SELECT #{imp.attempt}</if>
    </selectKey>
    INSERT INTO sector_import (<include refid="COLS"/>, attempt)
    VALUES (<include refid="PROPS"/>, #{imp.attempt})
  </insert>

  <update id="update" parameterType="SectorImport">
    UPDATE sector_import
    SET (<include refid="COLS"/>) = (<include refid="PROPS"/>)
    WHERE dataset_key=#{imp.datasetKey} AND sector_key=#{imp.sectorKey} AND attempt=#{imp.attempt}
  </update>

  <delete id="delete" parameterType="map">
    DELETE FROM sector_import
    WHERE sector_key=#{key.id} AND dataset_key=#{key.datasetKey}
  </delete>

  <delete id="deleteByDataset" parameterType="map">
    DELETE FROM sector_import
    WHERE dataset_key=#{datasetKey}
  </delete>

  <select id="countBareName" resultType="integer">
    SELECT count(*)
    FROM name n
    LEFT JOIN name_usage u ON n.id = u.name_id AND n.dataset_key=u.dataset_key
    WHERE n.dataset_key = #{datasetKey} AND u.id IS NULL AND n.sector_key=#{sectorKey}
  </select>
  <select id="countDistribution" resultType="integer">
    SELECT count(*)
    FROM distribution x
    JOIN name_usage t ON t.id=x.taxon_id AND x.dataset_key=t.dataset_key
    WHERE t.dataset_key = #{datasetKey} AND t.sector_key=#{sectorKey}
  </select>
  <select id="countEstimate" resultType="integer">
    SELECT count(*)
    FROM estimate x
    JOIN name_usage t ON t.id=x.target_id AND x.dataset_key=t.dataset_key
    WHERE t.dataset_key = #{datasetKey} AND t.sector_key=#{sectorKey}
  </select>
  <select id="countMedia" resultType="integer">
    SELECT count(*)
    FROM media x
      JOIN name_usage t ON t.id=x.taxon_id AND x.dataset_key=t.dataset_key
    WHERE t.dataset_key = #{datasetKey} AND t.sector_key=#{sectorKey}
  </select>
  <select id="countVernacular" resultType="integer">
    SELECT count(*)
    FROM vernacular_name x
      JOIN name_usage t ON t.id=x.taxon_id AND x.dataset_key=t.dataset_key
    WHERE t.dataset_key = #{datasetKey} AND t.sector_key=#{sectorKey}
  </select>
  <select id="countTreatment" resultType="integer">
    SELECT count(*)
    FROM treatment x
      JOIN name_usage t ON t.id=x.id AND x.dataset_key=t.dataset_key
    WHERE t.dataset_key = #{datasetKey} AND t.sector_key=#{sectorKey}
  </select>
  <select id="countTypeMaterial" resultType="integer">
    SELECT count(*) FROM type_material WHERE dataset_key=#{datasetKey} AND sector_key=#{sectorKey}
  </select>

  <select id="countName" resultType="integer">
    SELECT count(*) FROM name WHERE dataset_key=#{datasetKey} AND sector_key=#{sectorKey}
  </select>
  <select id="countReference" resultType="integer">
    SELECT count(*) FROM reference WHERE dataset_key=#{datasetKey} AND sector_key=#{sectorKey}
  </select>
  <select id="countTaxon" resultType="integer">
    SELECT count(*) FROM name_usage WHERE dataset_key=#{datasetKey} AND NOT is_synonym(status) AND sector_key=#{sectorKey}
  </select>
  <select id="countSynonym" resultType="integer">
    SELECT count(*) FROM name_usage WHERE dataset_key=#{datasetKey} AND is_synonym(status) AND sector_key=#{sectorKey}
  </select>

  <select id="countIssues" resultType="StringCount">
    WITH issues AS (
      SELECT vn.id, vn.issues
      FROM verbatim vn
      JOIN name n ON vn.dataset_key=n.dataset_key AND vn.id=n.verbatim_key
      WHERE n.dataset_key = #{datasetKey} AND n.sector_key=#{sectorKey}
    UNION
      SELECT vt.id, vt.issues
      FROM verbatim vt
      JOIN name_usage t ON vt.dataset_key=t.dataset_key AND vt.id=t.verbatim_key
    WHERE t.dataset_key = #{datasetKey} AND t.sector_key=#{sectorKey}
    UNION
      SELECT vr.id, vr.issues
      FROM verbatim vr
      JOIN reference r ON vr.dataset_key=r.dataset_key AND vr.id=r.verbatim_key
      WHERE r.dataset_key = #{datasetKey} AND r.sector_key=#{sectorKey}
    )
    SELECT iss AS key, count(*) AS count FROM (
    SELECT unnest(issues) iss FROM issues
    ) AS dis
    GROUP BY iss
  </select>

  <select id="countSecondarySourceByInfo" resultType="StringCount">
    SELECT type AS key, count(*) AS count
    FROM verbatim_source_secondary x
           JOIN name_usage u ON u.id=x.id AND u.dataset_key=x.dataset_key
    WHERE u.dataset_key=#{datasetKey} AND u.sector_key=#{sectorKey}
    GROUP BY type
  </select>
  <select id="countDistributionsByGazetteer" resultType="StringCount">
    SELECT gazetteer AS key, count(*) AS count
    FROM distribution x
    JOIN name_usage u ON u.id=x.taxon_id AND u.dataset_key=x.dataset_key
    WHERE u.dataset_key=#{datasetKey} AND u.sector_key=#{sectorKey}
    GROUP BY gazetteer
  </select>
  <select id="countMediaByType" resultType="StringCount">
    SELECT type AS key, count(*) AS count
    FROM media x
    JOIN name_usage u ON u.id=x.taxon_id AND u.dataset_key=x.dataset_key
    WHERE u.dataset_key=#{datasetKey} AND u.sector_key=#{sectorKey}
    GROUP BY type
  </select>
  <select id="countNamesByType" resultType="StringCount">
    SELECT type AS key, count(*) AS count
    FROM name
    WHERE dataset_key=#{datasetKey} AND sector_key=#{sectorKey}
    GROUP BY type
  </select>
  <select id="countNamesByMatchType" resultType="StringCount">
    SELECT type AS key, count(*) AS count
    FROM name_match
    WHERE dataset_key=#{datasetKey} AND sector_key=#{sectorKey}
    GROUP BY type
  </select>
  <select id="countNameRelationsByType" resultType="StringCount">
    SELECT r.type AS key, count(*) AS count
    FROM name_rel r
    JOIN name n ON r.name_id=n.id AND r.dataset_key=n.dataset_key AND r.dataset_key=n.dataset_key
    WHERE n.dataset_key=#{datasetKey} AND n.sector_key=#{sectorKey}
    GROUP BY r.type
  </select>
  <select id="countSpeciesInteractionsByType" resultType="StringCount">
    SELECT r.type AS key, count(*) AS count
    FROM species_interaction r
      JOIN name_usage u ON r.taxon_id=u.id AND r.dataset_key=u.dataset_key
    WHERE u.dataset_key=#{datasetKey} AND u.sector_key=#{sectorKey}
    GROUP BY r.type
  </select>
  <select id="countTaxonConceptRelationsByType" resultType="StringCount">
    SELECT r.type AS key, count(*) AS count
    FROM taxon_concept_rel r
    JOIN name_usage u ON r.taxon_id=u.id AND r.dataset_key=u.dataset_key
    WHERE u.dataset_key=#{datasetKey} AND u.sector_key=#{sectorKey}
    GROUP BY r.type
  </select>
  <select id="countNamesByStatus" resultType="StringCount">
    SELECT nom_status AS key, count(*) AS count
    FROM name
    WHERE dataset_key=#{datasetKey} AND sector_key=#{sectorKey}
    GROUP BY nom_status
  </select>
  <select id="countNamesByCode" resultType="StringCount">
    SELECT code AS key, count(*) AS count
    FROM name
    WHERE dataset_key=#{datasetKey} AND sector_key=#{sectorKey}
    GROUP BY code
  </select>
  <select id="countNamesByRank" resultType="StringCount">
    SELECT rank AS key, count(*) AS count
    FROM name
    WHERE dataset_key=#{datasetKey} AND sector_key=#{sectorKey}
    GROUP BY rank
  </select>
  <select id="countTaxaByRank" resultType="StringCount">
    SELECT n.rank AS key, count(*) AS count
    FROM name_usage t
    JOIN name n ON t.name_id=n.id AND n.dataset_key=t.dataset_key
    WHERE t.dataset_key=#{datasetKey} AND NOT is_synonym(t.status) AND t.sector_key=#{sectorKey}
    GROUP BY n.rank
  </select>

  <select id="countTaxaByScrutinizer" resultType="StringCount">
    SELECT coalesce(t.scrutinizer_id,t.scrutinizer) AS key, count(*) AS count
    FROM name_usage t
    WHERE t.dataset_key=#{datasetKey} AND NOT is_synonym(t.status) AND t.sector_key=#{sectorKey}
    GROUP BY 1
  </select>

  <select id="countExtinctTaxaByRank" resultType="StringCount">
    SELECT n.rank AS key, count(*) AS count
    FROM name_usage t
    JOIN name n ON t.name_id=n.id AND n.dataset_key=t.dataset_key
    WHERE t.dataset_key=#{datasetKey} AND NOT is_synonym(t.status) AND t.sector_key=#{sectorKey} AND t.extinct
    GROUP BY n.rank
  </select>
  <select id="countSynonymsByRank" resultType="StringCount">
    SELECT n.rank AS key, count(*) AS count
    FROM name_usage t
    JOIN name n ON t.name_id=n.id AND n.dataset_key=t.dataset_key
    WHERE t.dataset_key=#{datasetKey} AND is_synonym(t.status) AND t.sector_key=#{sectorKey}
    GROUP BY n.rank
  </select>
  <select id="countTypeMaterialByStatus" resultType="StringCount">
    SELECT status AS key, count(*) AS count
    FROM type_material
    WHERE dataset_key=#{datasetKey} AND sector_key=#{sectorKey}
    GROUP BY status
  </select>
  <select id="countUsagesByOrigin" resultType="StringCount">
    SELECT origin AS key, count(*) AS count
    FROM name_usage
    WHERE dataset_key=#{datasetKey} AND sector_key=#{sectorKey}
    GROUP BY origin
  </select>
  <select id="countUsagesByStatus" resultType="StringCount">
    SELECT status AS key, count(*) AS count
    FROM name_usage
    WHERE dataset_key=#{datasetKey} AND sector_key=#{sectorKey}
    GROUP BY status
  </select>
  <select id="countVernacularsByLanguage" resultType="StringCount">
    SELECT language AS key, count(*) AS count
    FROM vernacular_name x
    JOIN name_usage u ON x.dataset_key=u.dataset_key AND u.id=x.taxon_id
    WHERE u.dataset_key=#{datasetKey} AND u.sector_key=#{sectorKey}
    GROUP BY language
  </select>
</mapper>
