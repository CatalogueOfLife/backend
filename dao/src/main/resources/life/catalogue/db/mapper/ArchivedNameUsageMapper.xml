<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.ArchivedNameUsageMapper">

  <sql id="COLS">
    id,
    n_id,
    dataset_key,
    <!-- Name mappings -->
    n_rank,
    n_candidatus,
    n_notho,
    n_code,
    n_nom_status,
    n_original_spelling,
    n_gender_agreement,
    n_gender,
    n_origin,
    n_type,
    n_scientific_name,
    n_authorship,
    n_uninomial,
    n_genus,
    n_infrageneric_epithet,
    n_specific_epithet,
    n_infraspecific_epithet,
    n_cultivar_epithet,
    n_basionym_authors,
    n_basionym_ex_authors,
    n_basionym_year,
    n_combination_authors,
    n_combination_ex_authors,
    n_combination_year,
    n_sanctioning_author,
    n_published_in_id,
    n_published_in_page,
    n_nomenclatural_note,
    n_unparsed,
    n_identifier,
    n_etymology,
    n_link,
    n_remarks,
    <!-- NameUsageBase -->
    extinct,
    status,
    origin,
    parent_id,
    name_phrase,
    identifier,
    link,
    remarks,
    <!-- ArchivedNameUsage -->
    according_to,
    basionym,
    accepted,
    classification,
    published_in,
    release_keys
  </sql>


  <resultMap id="archivedNameResultMap" type="ArchivedNameUsage" autoMapping="true">
    <id property="id" column="id"/>
    <result property="identifier" column="identifier" typeHandler="life.catalogue.db.type2.IdentifierArrayTypeHandler"/>
    <result property="classification" column="classification" typeHandler="life.catalogue.db.type2.SimpleNameArrayTypeHandler"/>
    <result property="releaseKeys" column="release_keys" typeHandler="life.catalogue.db.type2.IntArrayTypeHandler"/>
    <association property="name" javaType="Name" resultMap="life.catalogue.db.mapper.NameMapper.nameResultMap" columnPrefix="n_"/>
  </resultMap>

  <resultMap id="archivedSimpleResultMap" type="ArchivedSimpleName" autoMapping="true">
    <id property="id" column="id"/>
    <result property="releaseKeys" column="release_keys" typeHandler="life.catalogue.db.type2.IntArrayTypeHandler"/>
    <result property="classification" column="classification" typeHandler="life.catalogue.db.type2.SimpleNameArrayTypeHandler"/>
  </resultMap>


  <select id="get" parameterType="map" resultMap="archivedNameResultMap">
    SELECT <include refid="COLS"/>
    FROM name_usage_archive
    WHERE dataset_key=#{key.datasetKey} AND id=#{key.id}
  </select>

  <select id="count" resultType="integer">
    SELECT count(*) FROM name_usage_archive
    WHERE dataset_key=#{datasetKey}
  </select>

  <select id="listProjects" resultType="integer">
    SELECT DISTINCT dataset_key
    FROM name_usage_archive
  </select>

  <delete id="deleteByDataset" parameterType="map">
    DELETE FROM name_usage_archive
    WHERE dataset_key=#{datasetKey}
  </delete>

  <select id="processDataset" parameterType="map" resultMap="archivedNameResultMap" resultOrdered="true" fetchSize="10000" resultSetType="FORWARD_ONLY">
    SELECT <include refid="COLS"/>
    FROM name_usage_archive
    WHERE dataset_key=#{datasetKey}
  </select>

  <select id="processArchivedUsages" parameterType="map" resultMap="archivedSimpleResultMap" resultOrdered="true" fetchSize="10000" resultSetType="FORWARD_ONLY">
    SELECT u.id,
      u.release_keys,
      u.n_scientific_name AS name,
      u.n_authorship AS authorship,
      u.name_phrase AS phrase,
      u.n_rank AS rank,
      u.n_code AS code,
      u.status,
      CASE WHEN is_synonym(u.status) THEN (u.accepted).name ELSE u.classification[array_upper(u.classification, 1)].name END AS parent,
      u.classification,
      ni.canonical_id,
      ni.id AS namesIndexId,
      m.type AS namesIndexMatchType
    FROM name_usage_archive u
      LEFT JOIN name_usage_archive_match m ON m.dataset_key=u.dataset_key AND m.usage_id=u.id
      LEFT JOIN names_index ni ON m.index_id=ni.id
    WHERE u.dataset_key=#{datasetKey}
    ORDER BY ni.canonical_id, ni.id
  </select>

  <select id="processArchivedNames" parameterType="map" resultMap="life.catalogue.db.mapper.NameMapper.nameResultMap" resultOrdered="true" fetchSize="10000" resultSetType="FORWARD_ONLY">
    SELECT
      u.id AS id,
      u.dataset_key,
      <!-- Name mappings -->
      u.n_rank AS rank,
      u.n_candidatus AS candidatus,
      u.n_notho AS notho,
      u.n_code AS code,
      u.n_nom_status AS nom_status,
      u.n_original_spelling AS original_spelling,
      u.n_gender_agreement AS gender_agreement,
      u.n_gender AS gender,
      u.n_origin AS origin,
      u.n_type AS type,
      u.n_scientific_name AS scientific_name,
      u.n_authorship AS authorship,
      u.n_uninomial AS uninomial,
      u.n_genus AS genus,
      u.n_infrageneric_epithet AS infrageneric_epithet,
      u.n_specific_epithet AS specific_epithet,
      u.n_infraspecific_epithet AS infraspecific_epithet,
      u.n_cultivar_epithet AS cultivar_epithet,
      u.n_basionym_authors AS basionym_authors,
      u.n_basionym_ex_authors AS basionym_ex_authors,
      u.n_basionym_year AS basionym_year,
      u.n_combination_authors AS combination_authors,
      u.n_combination_ex_authors AS combination_ex_authors,
      u.n_combination_year AS combination_year,
      u.n_sanctioning_author AS sanctioning_author,
      u.n_published_in_id AS published_in_id,
      u.n_published_in_page AS published_in_page,
      u.n_nomenclatural_note AS nomenclatural_note,
      u.n_unparsed AS unparsed,
      u.n_identifier AS identifier,
      u.n_link AS link,
      u.n_remarks AS remarks,
      <!-- name match -->
      m.index_id AS namesIndexId,
      m.type AS namesIndexType

    FROM name_usage_archive u
      LEFT JOIN name_usage_archive_match m ON m.dataset_key=u.dataset_key AND m.usage_id=u.id
    <where>
      <if test="datasetKey != null">u.dataset_key=#{datasetKey}</if>
      <if test="onlyMissing">AND m.type IS NULL</if>
    </where>
  </select>

  <select id="indexGroupIds" resultMap="life.catalogue.db.mapper.NameMapper.dsidResultMap">
    SELECT u.dataset_key, u.id
    FROM name_usage_archive_match m
      JOIN name_usage_archive u ON m.dataset_key=u.dataset_key AND m.usage_id=u.id
    WHERE m.index_id = #{nidx}
  </select>

  <update id="addReleaseKey" parameterType="map">
    UPDATE name_usage_archive a
    SET release_keys = array_append(release_keys, #{releaseKey})
    FROM name_usage u
    WHERE a.dataset_key=#{projectKey}
      AND u.dataset_key=#{releaseKey}
      AND a.id=u.id
  </update>

  <insert id="createMissingUsages" parameterType="map">
    INSERT INTO name_usage_archive (<include refid="COLS"/>)
    SELECT distinct on (u.id) u.id, n.id, #{projectKey},
      n.rank,
      n.candidatus,
      n.notho,
      n.code,
      n.nom_status,
      n.original_spelling,
      n.gender_agreement,
      n.gender,
      n.origin,
      n.type,
      n.scientific_name,
      n.authorship,
      n.uninomial,
      n.genus,
      n.infrageneric_epithet,
      n.specific_epithet,
      n.infraspecific_epithet,
      n.cultivar_epithet,
      n.basionym_authors,
      n.basionym_ex_authors,
      n.basionym_year,
      n.combination_authors,
      n.combination_ex_authors,
      n.combination_year,
      n.sanctioning_author,
      n.published_in_id,
      n.published_in_page,
      n.nomenclatural_note,
      n.unparsed,
      n.identifier,
      n.etymology,
      n.link,
      n.remarks,

      u.extinct,
      u.status,
      u.origin,
      u.parent_id,
      u.name_phrase,
      u.identifier,
      u.link,
      u.remarks,

      ra.citation, --according_to
      CASE WHEN bn.id IS NULL THEN null ELSE (bn.id,bn.rank,bn.scientific_name,bn.authorship)::simple_name END, --basionym
      CASE WHEN is_synonym(u.status) THEN (up.id,np.rank,np.scientific_name,np.authorship)::simple_name END, -- accepted
      CASE WHEN is_synonym(u.status) THEN mp.classification ELSE m.classification END, --classification
      rp.citation, --published_in
      array[#{releaseKey}] --release_keys
    FROM name_usage u
      JOIN name n ON n.dataset_key=u.dataset_key AND n.id=u.name_id
      LEFT JOIN reference ra ON ra.dataset_key=u.dataset_key AND ra.id=u.according_to_id
      LEFT JOIN name_rel br ON br.dataset_key=u.dataset_key AND br.name_id=n.id AND br.type='BASIONYM'::nomreltype
      LEFT JOIN name bn ON bn.dataset_key=u.dataset_key AND bn.id=br.related_name_id
      LEFT JOIN taxon_metrics m ON m.dataset_key=u.dataset_key AND m.taxon_id=u.id
      LEFT JOIN taxon_metrics mp ON mp.dataset_key=u.dataset_key AND mp.taxon_id=u.parent_id
      LEFT JOIN name_usage up ON up.dataset_key=u.dataset_key AND up.id=u.parent_id
      LEFT JOIN name np ON np.dataset_key=u.dataset_key AND np.id=up.name_id
      LEFT JOIN reference rp ON rp.dataset_key=u.dataset_key AND rp.id=n.published_in_id
    WHERE u.dataset_key=#{releaseKey}
      AND NOT EXISTS (SELECT true FROM name_usage_archive a WHERE a.dataset_key=#{projectKey} AND a.id=u.id)
  </insert>

  <update id="truncate">
    TRUNCATE name_usage_archive
  </update>
</mapper>
