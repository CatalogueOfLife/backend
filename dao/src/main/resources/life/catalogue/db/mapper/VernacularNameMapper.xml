<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.VernacularNameMapper">

  <sql id="SELECT">
    vn.id,
    vn.taxon_id,
    vn.dataset_key,
    vn.sector_key,
    vn.verbatim_key,
    vn.name,
    vn.latin,
    vn.language,
    vn.country,
    vn.area,
    vn.sex,
    vn.reference_id,
    vn.remarks,
    vn.created,
    vn.created_by,
    vn.modified,
    vn.modified_by
  </sql>

  <sql id="COLS">
    dataset_key,
    sector_key,
    taxon_id,
    <include refid="COLS_COPY"/>
  </sql>

  <sql id="COLS_COPY">
    verbatim_key,
    verbatim_source_key,
    name,
    latin,
    language,
    country,
    area,
    sex,
    reference_id,
    remarks,
    created_by,
    modified_by
  </sql>

  <sql id="PROPS">
    #{obj.datasetKey},
    #{obj.sectorKey},
    #{taxonId},
    #{obj.verbatimKey},
    #{obj.verbatimSourceKey},
    #{obj.name},
    #{obj.latin},
    #{obj.language},
    #{obj.country},
    #{obj.area},
    #{obj.sex}::SEX,
    #{obj.referenceId},
    #{obj.remarks},
    #{obj.createdBy},
    #{obj.modifiedBy}
  </sql>

  <sql id="FROM">vernacular_name vn</sql>

  <sql id="SEARCH_WHERE">
    <if test="req != null">
      <if test="req.sectorDatasetKey != null">
        JOIN sector s ON s.id=vn.sector_key
      </if>
      <where>
        vn.dataset_key = #{datasetKey}
        <if test="req.q != null">
          <!-- we use dollar quoted strings with a token ($Grtz5$) to avoid escaping quotes -->
          AND vn.doc @@ plainto_tsquery('vernacular', $Grtz5$%${req.q}%$Grtz5$)
        </if>
        <if test="req.language != null">
          AND vn.language = #{req.language}
        </if>
        <if test="req.sectorKey != null">
          AND vn.sector_key = #{req.sectorKey}
        </if>
        <if test="req.sectorDatasetKey != null">
          AND s.subject_dataset_key = #{req.sectorDatasetKey}
        </if>
      </where>
    </if>
  </sql>

  <resultMap id="vernacularNameResultMap" type="VernacularName" autoMapping="true">
    <id property="id" column="id"/>
  </resultMap>

  <resultMap id="vernacularNameUsageResultMap" type="VernacularNameUsage" autoMapping="true">
    <id property="id" column="id"/>
    <result property="taxonID" column="taxon_id"/>
  </resultMap>

  <resultMap id="vernacularExtNameResultMap" type="TaxonExtension" autoMapping="true">
    <id column="id"/>
    <result property="taxonID" column="taxon_id"/>
    <association property="obj" autoMapping="true" javaType="VernacularName">
      <id property="id" column="id"/>
    </association>
  </resultMap>

  <select id="listByTaxonFiltered" resultMap="vernacularNameResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE vn.dataset_key = #{key.datasetKey} AND vn.taxon_id = #{key.id}
    <if test="lang != null">
      AND vn.language = #{lang}
    </if>
    ORDER BY name
  </select>

  <select id="get" resultMap="vernacularNameResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE vn.dataset_key = #{key.datasetKey} AND vn.id = #{key.id}
  </select>

  <select id="searchAll" resultMap="vernacularNameUsageResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    <where>
      <if test="q != null">
        <!-- we use dollar quoted strings with a token ($Grtz5$) to avoid escaping quotes -->
        vn.doc @@ plainto_tsquery('vernacular', $Grtz5$%${q}%$Grtz5$)
      </if>
      <if test="lang != null">
        AND vn.language = #{lang}
      </if>
    </where>
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="search" resultMap="vernacularNameUsageResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    <include refid="SEARCH_WHERE"/>
    ORDER BY name
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="count" resultType="integer">
    SELECT count(*)
    FROM <include refid="FROM"/>
    <include refid="SEARCH_WHERE"/>
  </select>

  <select id="processDataset" parameterType="map" resultMap="vernacularExtNameResultMap" resultOrdered="true" fetchSize="10000" resultSetType="FORWARD_ONLY">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE vn.dataset_key = #{datasetKey}
  </select>

  <insert id="create" parameterType="VernacularName" useGeneratedKeys="true" keyProperty="obj.id">
    INSERT INTO vernacular_name (<include refid="COLS"/>, created, modified, id)
    VALUES (<include refid="PROPS"/>, now(), now(), nextval('vernacular_name_${obj.datasetKey}_id_seq'))
  </insert>

  <delete id="deleteByTaxon" parameterType="map">
    DELETE FROM vernacular_name
    WHERE dataset_key = #{key.datasetKey} AND taxon_id = #{key.id}
  </delete>

  <delete id="deleteByTemp" parameterType="map">
    DELETE FROM vernacular_name
    USING _tmp_nu tmp
    WHERE dataset_key=#{datasetKey} AND taxon_id = tmp.uid
  </delete>

  <insert id="copyDataset" parameterType="map">
    INSERT INTO vernacular_name (dataset_key,taxon_id,id,<include refid="COLS_COPY"/>, created, modified)
    SELECT #{newDatasetKey},coalesce(<if test="mapIds">m.id2,</if>taxon_id),nextval('vernacular_name_${newDatasetKey}_id_seq'),<include refid="COLS_COPY"/>, created, modified
    FROM vernacular_name v
    <if test="mapIds">
      LEFT JOIN idmap_name_usage_${datasetKey} m ON m.id=v.taxon_id
    </if>
    WHERE dataset_key = #{datasetKey}
  </insert>

  <select id="processSector" parameterType="map" resultMap="vernacularNameResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE vn.dataset_key = #{key.datasetKey} AND vn.sector_key = #{key.id}
  </select>

  <select id="entityExists" parameterType="map" resultType="boolean">
    SELECT EXISTS (
      SELECT TRUE FROM vernacular_name WHERE dataset_key=#{datasetKey}
    )
  </select>

  <delete id="deleteBySector" parameterType="map">
    DELETE FROM vernacular_name
    WHERE dataset_key = #{key.datasetKey} AND sector_key=#{key.id}
  </delete>

  <update id="removeSectorKey" parameterType="map">
    UPDATE vernacular_name SET sector_key = NULL, verbatim_source_key = NULL
    WHERE dataset_key = #{key.datasetKey} AND sector_key = #{key.id}
  </update>

  <update id="updateTaxonID" parameterType="map">
    UPDATE vernacular_name SET taxon_id=#{newTaxonID}, modified_by=#{userKey}, modified=now()
    WHERE dataset_key=#{key.datasetKey} AND taxon_id=#{key.id}
  </update>

</mapper>
