<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.NameRelationMapper">

  <sql id="SELECT">
    nr.id,
    nr.dataset_key,
    nr.sector_key,
    nr.name_id,
    nr.related_name_id,
    nr.verbatim_key,
    nr.verbatim_source_key,
    nr.type,
    nr.reference_id,
    nr.remarks,
    nr.created,
    nr.created_by,
    nr.modified,
    nr.modified_by
  </sql>

  <sql id="COLS">
    dataset_key,
    sector_key,
    name_id,
    related_name_id,
    <include refid="COLS_COPY"/>
  </sql>

  <sql id="COLS_COPY">
    verbatim_key,
    verbatim_source_key,
    type,
    reference_id,
    remarks,
    created_by,
    modified_by
  </sql>

  <sql id="PROPS">
    #{datasetKey},
    #{sectorKey},
    #{nameId},
    #{relatedNameId},
    #{verbatimKey},
    #{verbatimSourceKey},
    #{type}::NOMRELTYPE,
    #{referenceId},
    #{remarks},
    #{createdBy},
    #{modifiedBy}
  </sql>

  <sql id="FROM">name_rel nr</sql>

  <resultMap id="nameRelResultMap" type="NameRelation" autoMapping="true">
    <id property="id" column="id"/>
  </resultMap>

  <resultMap id="usageRelResultMap" type="NameUsageRelation" autoMapping="true">
    <id property="id" column="id"/>
  </resultMap>


  <select id="listByName" resultMap="nameRelResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE nr.dataset_key = #{key.datasetKey} AND nr.name_id = #{key.id}
  </select>

  <select id="listUsageRelByName" resultMap="usageRelResultMap">
    SELECT <include refid="SELECT"/>, u.id AS related_usage_id
    FROM <include refid="FROM"/>
    LEFT JOIN name_usage u ON u.dataset_key=nr.dataset_key AND u.name_id=nr.related_name_id
    WHERE nr.dataset_key = #{key.datasetKey} AND nr.name_id = #{key.id}
  </select>

  <delete id="deleteByName" parameterType="map">
    DELETE FROM name_rel
    WHERE dataset_key = #{key.datasetKey} AND name_id = #{key.id}
  </delete>

  <delete id="deleteByTemp" parameterType="map">
    DELETE FROM name_rel
    USING _tmp_nu tmp
    WHERE dataset_key=#{datasetKey} AND name_id = tmp.nid
  </delete>

  <select id="listByRelatedName" resultMap="nameRelResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE nr.dataset_key = #{key.datasetKey} AND nr.related_name_id = #{key.id}
  </select>

  <select id="listUsageRelByRelatedName" resultMap="usageRelResultMap">
    SELECT <include refid="SELECT"/>, u.id AS usage_id
    FROM <include refid="FROM"/>
      LEFT JOIN name_usage u ON u.dataset_key=nr.dataset_key AND u.name_id=nr.name_id
    WHERE nr.dataset_key = #{key.datasetKey} AND nr.related_name_id = #{key.id}
  </select>

  <select id="processDataset" parameterType="map" resultMap="nameRelResultMap" resultOrdered="true" fetchSize="10000" resultSetType="FORWARD_ONLY">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE nr.dataset_key = #{datasetKey}
  </select>

  <select id="listByType" resultMap="nameRelResultMap">
    SELECT <include refid="SELECT"/>
    FROM name_rel nr
    WHERE nr.dataset_key = #{key.datasetKey}
      AND nr.type=#{type}::NOMRELTYPE
      AND nr.name_id = #{key.id}
  </select>

  <select id="listByTypeReverse" resultMap="nameRelResultMap">
    SELECT <include refid="SELECT"/>
    FROM name_rel nr
    WHERE nr.dataset_key = #{key.datasetKey}
      AND nr.type=#{type}::NOMRELTYPE
      AND nr.related_name_id = #{key.id}
  </select>

  <select id="listRelatedNameIDs" resultType="string">
    WITH RECURSIVE graph (nid, path) AS (

    (SELECT name_id, ARRAY[related_name_id, name_id]
      FROM name_rel
      WHERE dataset_key = #{key.datasetKey} AND related_name_id = #{key.id}
        AND type IN <foreach item="t" collection="types" open="(" separator="," close=")">'${t.name()}'::NOMRELTYPE</foreach>
    UNION
      SELECT related_name_id, ARRAY[name_id, related_name_id]
      FROM name_rel
      WHERE dataset_key = #{key.datasetKey} AND name_id = #{key.id}
        AND type IN <foreach item="t" collection="types" open="(" separator="," close=")">'${t.name()}'::NOMRELTYPE</foreach>
    )

    UNION

    SELECT CASE g.nid WHEN nr.name_id THEN nr.related_name_id ELSE nr.name_id END,
      array_append(g.path, CASE g.nid WHEN nr.name_id THEN nr.related_name_id ELSE nr.name_id END)
    FROM name_rel nr
      INNER JOIN graph g ON (g.nid = nr.name_id AND nr.related_name_id != ALL(g.path)) OR (g.nid = nr.related_name_id AND nr.name_id != ALL(g.path))
    WHERE nr.dataset_key = #{key.datasetKey}
      AND nr.type IN <foreach item="t" collection="types" open="(" separator="," close=")">'${t.name()}'::NOMRELTYPE</foreach>
      AND array_length(g.path,1) &lt; 25

    ) SELECT DISTINCT nid FROM graph
  </select>

  <insert id="create" parameterType="NameRelation" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO name_rel (<include refid="COLS"/>, created, modified, id)
    VALUES (<include refid="PROPS"/>, now(), now(), nextval('name_rel_${datasetKey}_id_seq'))
  </insert>

  <insert id="copyDataset" parameterType="map">
    INSERT INTO name_rel (dataset_key,name_id,related_name_id,id,<include refid="COLS_COPY"/>, created, modified)
    SELECT #{newDatasetKey},coalesce(<if test="mapIds">m1.id2,</if>name_id),coalesce(<if test="mapIds">m2.id2,</if>related_name_id),nextval('name_rel_${newDatasetKey}_id_seq'),<include refid="COLS_COPY"/>, created, modified
    FROM name_rel r
    <if test="mapIds">
      LEFT JOIN idmap_name_${datasetKey} m1 ON m1.id=r.name_id
      LEFT JOIN idmap_name_${datasetKey} m2 ON m2.id=r.related_name_id
    </if>
    WHERE r.dataset_key=#{datasetKey}
  </insert>

  <select id="exists" parameterType="map" resultType="boolean">
    SELECT EXISTS (
      SELECT 1 FROM name_rel
      WHERE dataset_key=#{datasetKey} AND name_id=#{from} AND related_name_id=#{to} AND type=#{type}::NOMRELTYPE
    )
  </select>

  <delete id="deleteOrphans" parameterType="map">
    DELETE FROM name_rel r
    WHERE (
      NOT EXISTS (SELECT NULL FROM name n WHERE n.dataset_key=r.dataset_key AND r.name_id = n.id)
      OR NOT EXISTS (SELECT NULL FROM name n WHERE n.dataset_key=r.dataset_key AND r.related_name_id = n.id)
    )
    <if test="before!=null">
      AND r.modified &lt; #{before}
    </if>
    AND r.dataset_key=#{datasetKey}
  </delete>

  <select id="processSector" parameterType="map" resultMap="nameRelResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE nr.dataset_key = #{key.datasetKey} AND nr.sector_key = #{key.id}
  </select>

  <delete id="deleteBySector" parameterType="map">
    DELETE FROM name_rel
    WHERE dataset_key=#{key.datasetKey} AND sector_key=#{key.id}
  </delete>

  <update id="removeSectorKey" parameterType="map">
    UPDATE name_rel SET sector_key = NULL, verbatim_source_key = NULL
    WHERE dataset_key=#{key.datasetKey} AND sector_key = #{key.id}
  </update>

  <delete id="deleteByDataset" parameterType="map">
    DELETE FROM name_rel
    WHERE dataset_key=#{datasetKey}
  </delete>

</mapper>
