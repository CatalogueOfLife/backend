<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.DecisionMapper">

  <sql id="SelectVar">
    ${alias}id AS ${prefix}id,
    ${alias}dataset_key AS ${prefix}dataset_key,
    ${alias}subject_dataset_key AS ${prefix}subject_dataset_key,
    ${alias}original_subject_id AS ${prefix}original_subject_id,
    ${alias}subject_id AS ${prefix}subject_id,
    ${alias}subject_name AS ${prefix}subject_name,
    ${alias}subject_authorship AS ${prefix}subject_authorship,
    ${alias}subject_rank AS ${prefix}subject_rank,
    ${alias}subject_code AS ${prefix}subject_code,
    ${alias}subject_status AS ${prefix}subject_status,
    ${alias}subject_parent AS ${prefix}subject_parent,
    ${alias}note AS ${prefix}note,
    ${alias}modified AS ${prefix}modified,
    ${alias}modified_by AS ${prefix}modified_by,
    ${alias}created AS ${prefix}created,
    ${alias}created_by AS ${prefix}created_by,
    ${alias}mode AS ${prefix}mode,
    ${alias}name AS ${prefix}name,
    ${alias}status AS ${prefix}status,
    ${alias}extinct AS ${prefix}extinct,
    ${alias}keep_original_name AS ${prefix}keep_original_name,
    ${alias}temporal_range_start AS ${prefix}temporal_range_start,
    ${alias}temporal_range_end AS ${prefix}temporal_range_end,
    ${alias}environments AS ${prefix}environments
  </sql>

  <sql id="SELECT">
    t.id IS NULL AS subject_broken,
    <include refid="life.catalogue.db.mapper.DecisionMapper.SelectVar">
      <property name="alias" value="ed."/>
      <property name="prefix" value=""/>
    </include>
  </sql>

  <sql id="COLS">
    dataset_key,
    <include refid="COLS_NO_DATASETKEY"/>
  </sql>

  <sql id="COLS_NO_DATASETKEY">
    <include refid="COLS_NO_DATASETKEY_PREFIX">
      <property name="alias" value=""/>
    </include>
  </sql>

  <sql id="COLS_NO_DATASETKEY_PREFIX">
    ${alias}subject_dataset_key,
    ${alias}subject_id,
    ${alias}subject_name,
    ${alias}subject_authorship,
    ${alias}subject_rank,
    ${alias}subject_code,
    ${alias}subject_status,
    ${alias}subject_parent,
    ${alias}note,
    ${alias}modified,
    ${alias}modified_by,
    ${alias}mode,
    ${alias}name,
    ${alias}status,
    ${alias}extinct,
    ${alias}keep_original_name,
    ${alias}temporal_range_start,
    ${alias}temporal_range_end,
    ${alias}environments
  </sql>

  <sql id="PROPS">
    #{datasetKey},
    #{subjectDatasetKey},
    #{subject.id},
    #{subject.name},
    #{subject.authorship},
    #{subject.rank}::RANK,
    #{subject.code}::NOMCODE,
    #{subject.status}::TAXONOMICSTATUS,
    #{subject.parent},
    #{note},
    now(),
    #{modifiedBy},
    #{mode}::EDITORIALDECISION_MODE,
    #{name, typeHandler=life.catalogue.db.type2.JsonNameHandler}::jsonb,
    #{status}::TAXONOMICSTATUS,
    #{extinct},
    #{keepOriginalName},
    #{temporalRangeStart},
    #{temporalRangeEnd},
    #{environments, typeHandler=life.catalogue.db.type.EnvironmentSetTypeHandler}
  </sql>

  <sql id="JOIN_USAGE">
    LEFT JOIN name_usage t ON t.dataset_key=ed.subject_dataset_key AND t.id=ed.subject_id
  </sql>
  <sql id="FROM">
    decision ed <include refid="JOIN_USAGE"/>
  </sql>

  <sql id="WHERE">
    <if test="req != null">
      <where>
        <if test="req.broken">
          t.id IS NULL
        </if>
        <if test="req.id != null">
          AND ed.subject_id = #{req.id}
        </if>
        <if test="req.datasetKey != null">
          AND ed.dataset_key = #{req.datasetKey}
        </if>
        <if test="req.subjectDatasetKey != null">
          AND ed.subject_dataset_key = #{req.subjectDatasetKey}
        </if>
        <if test="req.mode != null">
          AND ed.mode = #{req.mode}::EDITORIALDECISION_MODE
        </if>
        <if test="req.rank != null">
          AND ed.subject_rank = #{req.rank}::RANK
        </if>
        <if test="req.name != null">
          AND ed.subject_name ILIKE '%${req.name}%'
        </if>
        <if test="req.modifiedBy != null">
          AND ed.modified_by = #{req.modifiedBy}
        </if>
      </where>
    </if>
  </sql>


  <resultMap id="decisionResultMap" type="EditorialDecision" autoMapping="true">
    <id property="id" column="id"/>
    <result property="name" column="name" typeHandler="life.catalogue.db.type2.JsonNameHandler"/>
    <result property="environments" column="environments" typeHandler="life.catalogue.db.type.EnvironmentSetTypeHandler"/>
    <association property="subject" javaType="SimpleNameLink" autoMapping="true" columnPrefix="subject_"/>
  </resultMap>


  <select id="list" resultMap="decisionResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE ed.dataset_key = #{datasetKey}
    ORDER BY ed.id
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="count" resultType="integer">
    SELECT count(*)
    FROM decision ed
    WHERE ed.dataset_key = #{datasetKey}
  </select>

  <select id="countSearch" resultType="integer">
    SELECT count(*)
    FROM decision ed
    <if test="req.broken">
      <include refid="JOIN_USAGE"/>
    </if>
    <include refid="WHERE"/>
  </select>

  <select id="search" resultMap="decisionResultMap">
    SELECT<include refid="SELECT"/>
    FROM <include refid="FROM"/>
    <include refid="WHERE"/>
    ORDER BY ed.id desc
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="processSearch" resultMap="decisionResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    <include refid="WHERE"/>
    ORDER BY ed.id desc
  </select>

  <select id="get" resultMap="decisionResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE ed.id = #{key.id} AND ed.dataset_key=#{key.datasetKey}
  </select>

  <select id="exists" resultType="boolean">
    SELECT EXISTS (
      SELECT TRUE
      FROM decision ed
      WHERE ed.id = #{key.id} AND ed.dataset_key=#{key.datasetKey}
    )
  </select>

  <select id="existsWithKeyOrSubject" resultType="boolean">
    SELECT EXISTS (
      SELECT TRUE
      FROM decision ed
      WHERE ed.dataset_key=#{d.datasetKey} AND
            (ed.id = #{d.id} OR (ed.subject_dataset_key = #{d.subjectDatasetKey} AND ed.subject_id = #{d.subject.id}))
    )
  </select>

  <select id="getBySubject" resultMap="decisionResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE ed.subject_dataset_key = #{subjectDatasetKey}
    AND ed.dataset_key = #{datasetKey}
    AND ed.subject_id = #{id}
  </select>

  <select id="listBySubject" resultMap="decisionResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE ed.subject_dataset_key = #{subjectDatasetKey}
    AND ed.subject_id = #{id}
  </select>

  <select id="getByReleasedUsage" resultMap="decisionResultMap">
    SELECT false AS subject_broken,
    <include refid="life.catalogue.db.mapper.DecisionMapper.SelectVar">
      <property name="alias" value="d."/>
      <property name="prefix" value=""/>
    </include>
    FROM name_usage u
      JOIN verbatim_source v ON v.dataset_key=u.dataset_key AND v.id=u.verbatim_source_key
      JOIN decision d ON d.dataset_key=u.dataset_key AND d.subject_id=v.source_id AND d.subject_dataset_key=v.source_dataset_key
    WHERE u.dataset_key=#{key.datasetKey} AND u.id=#{key.id};
  </select>

  <insert id="create" parameterType="EditorialDecision" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO decision (id, <include refid="COLS"/>, original_subject_id, created_by )
    VALUES (nextval('decision_${datasetKey}_id_seq'), <include refid="PROPS"/>, #{subject.id}, #{createdBy} )
  </insert>

  <insert id="createWithID" parameterType="EditorialDecision" useGeneratedKeys="false" keyProperty="id">
    INSERT INTO decision (id, <include refid="COLS"/>, original_subject_id, created_by )
    VALUES (#{id}, <include refid="PROPS"/>, #{subject.id}, #{createdBy} )
  </insert>

  <update id="update" parameterType="EditorialDecision">
    UPDATE decision
    SET (<include refid="COLS"/>) = (<include refid="PROPS"/>)
    WHERE id = #{id} AND dataset_key=#{datasetKey}
  </update>

  <delete id="delete" parameterType="map">
    DELETE FROM decision
    WHERE id = #{key.id} AND dataset_key=#{key.datasetKey}
  </delete>

  <delete id="deleteByDataset" parameterType="map">
    DELETE FROM decision WHERE dataset_key = #{datasetKey}
  </delete>

  <select id="processDataset" parameterType="map" resultMap="decisionResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE ed.dataset_key=#{datasetKey}
  </select>

  <select id="processDecisions" parameterType="map" resultMap="decisionResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE ed.subject_dataset_key = #{subjectDatasetKey}
    <if test="datasetKey!=null">
      AND ed.dataset_key = #{datasetKey}
    </if>
  </select>

  <select id="listStaleAmbiguousUpdateDecisions" resultType="integer">
    SELECT ed.id
    FROM decision ed JOIN name n ON n.dataset_key=ed.subject_dataset_key
      AND n.rank = ed.subject_rank
      AND lower(n.scientific_name) = lower(ed.subject_name)
    WHERE ed.dataset_key = #{datasetKey}
      AND ed.mode = 'UPDATE'::EDITORIALDECISION_MODE
      AND ed.status = 'AMBIGUOUS_SYNONYM'::TAXONOMICSTATUS
    <if test="subjectDatasetKey!=null">
      AND ed.subject_dataset_key = #{subjectDatasetKey}
    </if>
    GROUP BY ed.id
    HAVING count(*) = 1
    LIMIT #{limit}
  </select>

  <select id="listProjectKeys" parameterType="map" resultType="integer">
    SELECT DISTINCT x.dataset_key
    FROM decision x JOIN dataset d ON d.key=x.dataset_key
    WHERE d.origin='PROJECT' AND x.subject_dataset_key = #{subjectDatasetKey}
  </select>

  <insert id="copyDataset" parameterType="map">
    INSERT INTO decision (id, dataset_key, <include refid="COLS_NO_DATASETKEY"/>, original_subject_id, created, created_by )
    SELECT id, #{newDatasetKey}, <include refid="COLS_NO_DATASETKEY"/>, original_subject_id, created, created_by
    FROM decision
    WHERE dataset_key=#{datasetKey}
  </insert>

  <select id="searchModeFacet" resultType="life.catalogue.db.mapper.DecisionMapper$ModeValue">
    SELECT mode, count(*)
    FROM decision ed
    <if test="req.broken">
      <include refid="JOIN_USAGE"/>
    </if>
    <include refid="WHERE"/>
    GROUP BY mode
  </select>

</mapper>
