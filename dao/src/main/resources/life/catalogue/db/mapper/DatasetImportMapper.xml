<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.DatasetImportMapper">

  <sql id="SELECT">
    di.dataset_key,
    di.attempt,
    di.state,
    <include refid="life.catalogue.db.mapper.DatasetImportMapper.metricsCols">
      <property name="alias" value="di."/>
    </include>,
    di.md5,
    di.download_uri,
    di.download,
    di.format,
    di.origin,
    di.max_classification_depth,
    di.verbatim_count,
    di.verbatim_by_term_count,
    di.verbatim_by_row_type_count,
    di.merged_taxa_by_rank_count,
    di.merged_synonyms_by_rank_count
  </sql>

  <!-- shared with sector import metrics -->
  <sql id="metricsCols">
    ${alias}job,
    ${alias}error,
    ${alias}started,
    ${alias}finished,
    ${alias}created_by,
    ${alias}applied_decision_count,
    ${alias}bare_name_count,
    ${alias}distribution_count,
    ${alias}estimate_count,
    ${alias}media_count,
    ${alias}name_count,
    ${alias}reference_count,
    ${alias}synonym_count,
    ${alias}taxon_count,
    ${alias}treatment_count,
    ${alias}type_material_count,
    ${alias}vernacular_count,
    ${alias}distributions_by_gazetteer_count,
    ${alias}extinct_taxa_by_rank_count,
    ${alias}ignored_by_reason_count,
    ${alias}issues_by_issue_count,
    ${alias}media_by_type_count,
    ${alias}name_relations_by_type_count,
    ${alias}names_by_code_count,
    ${alias}names_by_rank_count,
    ${alias}names_by_status_count,
    ${alias}names_by_type_count,
    ${alias}names_by_match_type_count,
    ${alias}species_interactions_by_type_count,
    ${alias}synonyms_by_rank_count,
    ${alias}taxa_by_rank_count,
    ${alias}taxa_by_scrutinizer_count,
    ${alias}taxon_concept_relations_by_type_count,
    ${alias}type_material_by_status_count,
    ${alias}usages_by_origin_count,
    ${alias}usages_by_status_count,
    ${alias}vernaculars_by_language_count,
    ${alias}secondary_source_by_info_count
  </sql>

  <sql id="COLS">
    dataset_key,
    state,
    <include refid="life.catalogue.db.mapper.DatasetImportMapper.metricsCols">
      <property name="alias" value=""/>
    </include>,
    md5,
    download_uri,
    download,
    format,
    origin,
    max_classification_depth,
    verbatim_count,
    verbatim_by_term_count,
    verbatim_by_row_type_count,
    merged_taxa_by_rank_count,
    merged_synonyms_by_rank_count
  </sql>

  <sql id="metricsProps">
    #{imp.job},
    #{imp.error},
    #{imp.started},
    #{imp.finished},
    #{imp.createdBy},
    #{imp.appliedDecisionCount},
    #{imp.bareNameCount},
    #{imp.distributionCount},
    #{imp.estimateCount},
    #{imp.mediaCount},
    #{imp.nameCount},
    #{imp.referenceCount},
    #{imp.synonymCount},
    #{imp.taxonCount},
    #{imp.treatmentCount},
    #{imp.typeMaterialCount},
    #{imp.vernacularCount},
    #{imp.distributionsByGazetteerCount, typeHandler=life.catalogue.db.type2.HstoreGazetteerCountTypeHandler}::hstore,
    #{imp.extinctTaxaByRankCount, typeHandler=life.catalogue.db.type2.HstoreRankCountTypeHandler}::hstore,
    #{imp.ignoredByReasonCount, typeHandler=life.catalogue.db.type2.HstoreIgnoredCountTypeHandler}::hstore,
    #{imp.issuesCount, typeHandler=life.catalogue.db.type2.HstoreIssueCountTypeHandler}::hstore,
    #{imp.mediaByTypeCount, typeHandler=life.catalogue.db.type2.HstoreIssueCountTypeHandler}::hstore,
    #{imp.nameRelationsByTypeCount, typeHandler=life.catalogue.db.type2.HstoreNameRelCountTypeHandler}::hstore,
    #{imp.namesByCodeCount, typeHandler=life.catalogue.db.type2.HstoreCodeCountTypeHandler}::hstore,
    #{imp.namesByRankCount, typeHandler=life.catalogue.db.type2.HstoreRankCountTypeHandler}::hstore,
    #{imp.namesByStatusCount, typeHandler=life.catalogue.db.type2.HstoreNomStatusCountTypeHandler}::hstore,
    #{imp.namesByTypeCount, typeHandler=life.catalogue.db.type2.HstoreNameTypeCountTypeHandler}::hstore,
    #{imp.namesByMatchTypeCount, typeHandler=life.catalogue.db.type2.HstoreNameMatchTypeCountTypeHandler}::hstore,
    #{imp.speciesInteractionsByTypeCount, typeHandler=life.catalogue.db.type2.HstoreSpeciesInteractionCountTypeHandler}::hstore,
    #{imp.synonymsByRankCount, typeHandler=life.catalogue.db.type2.HstoreRankCountTypeHandler}::hstore,
    #{imp.taxaByRankCount, typeHandler=life.catalogue.db.type2.HstoreRankCountTypeHandler}::hstore,
    #{imp.taxaByScrutinizerCount, typeHandler=life.catalogue.db.type2.HstoreStringCountTypeHandler}::hstore,
    #{imp.taxonConceptRelationsByTypeCount, typeHandler=life.catalogue.db.type2.HstoreTaxonConceptRelCountTypeHandler}::hstore,
    #{imp.typeMaterialByStatusCount, typeHandler=life.catalogue.db.type2.HstoreRankCountTypeHandler}::hstore,
    #{imp.usagesByOriginCount, typeHandler=life.catalogue.db.type2.HstoreOriginCountTypeHandler}::hstore,
    #{imp.usagesByStatusCount, typeHandler=life.catalogue.db.type2.HstoreTaxStatusCountTypeHandler}::hstore,
    #{imp.vernacularsByLanguageCount, typeHandler=life.catalogue.db.type2.HstoreStringCountTypeHandler}::hstore,
    #{imp.secondarySourceByInfoCount, typeHandler=life.catalogue.db.type2.HstoreInfoGroupCountTypeHandler}::hstore
  </sql>

  <sql id="PROPS">
    #{imp.datasetKey},
    #{imp.state}::IMPORTSTATE,
    <include refid="life.catalogue.db.mapper.DatasetImportMapper.metricsProps"/>,
    #{imp.md5},
    #{imp.downloadUri},
    #{imp.download},
    #{imp.format}::DATAFORMAT,
    #{imp.origin}::DATASETORIGIN,
    #{imp.maxClassificationDepth},
    #{imp.verbatimCount},
    #{imp.verbatimByTermCount},
    #{imp.verbatimByRowTypeCount, typeHandler=life.catalogue.db.type2.NestedTermMapTypeHandler}::jsonb,
    #{imp.mergedTaxaByRankCount, typeHandler=life.catalogue.db.type2.HstoreInfoGroupCountTypeHandler}::hstore,
    #{imp.mergedSynonymsByRankCount, typeHandler=life.catalogue.db.type2.HstoreInfoGroupCountTypeHandler}::hstore
  </sql>

  <sql id="FROM">
    dataset_import di
  </sql>

  <sql id="WHERE">
    <where>
      <if test="req != null">
        <if test="req.datasetKey != null">
          di.dataset_key = #{req.datasetKey}
        </if>
        <if test="req.states != null &amp;&amp; !req.states.isEmpty()">
          AND di.state IN
          <foreach item="state" index="idx" collection="req.states" open="(" separator="," close=")">
            #{state}::IMPORTSTATE
          </foreach>
        </if>
        <if test="req.createdBy != null">
          AND di.created_by = #{req.createdBy}
        </if>
        <if test="req.job != null">
          AND lower(di.job) = lower(#{req.job})
        </if>
        <if test="req.format != null">
          AND di.format = #{req.format}::DATAFORMAT
        </if>
      </if>
    </where>
  </sql>

  <resultMap id="datasetImportResultMap" type="DatasetImport" autoMapping="true" extends="importMetricsResultMap">
    <result property="verbatimByTermCount" column="verbatim_by_term_count" typeHandler="life.catalogue.db.type2.HstoreTermCountTypeHandler"/>
    <result property="verbatimByRowTypeCount" column="verbatim_by_row_type_count" typeHandler="life.catalogue.db.type2.NestedTermMapTypeHandler"/>
    <result property="mergedTaxaByRankCount" column="merged_taxa_by_rank_count" typeHandler="life.catalogue.db.type2.HstoreRankCountTypeHandler"/>
    <result property="mergedSynonymsByRankCount" column="merged_synonyms_by_rank_count" typeHandler="life.catalogue.db.type2.HstoreRankCountTypeHandler"/>
  </resultMap>

  <!--  shared mapping for the base ImportMetrics -->
  <resultMap id="importMetricsResultMap" type="ImportMetrics" autoMapping="true">
    <result property="distributionsByGazetteerCount" column="distributions_by_gazetteer_count" typeHandler="life.catalogue.db.type2.HstoreGazetteerCountTypeHandler"/>
    <result property="extinctTaxaByRankCount" column="extinct_taxa_by_rank_count" typeHandler="life.catalogue.db.type2.HstoreRankCountTypeHandler"/>
    <result property="ignoredByReasonCount" column="ignored_by_reason_count" typeHandler="life.catalogue.db.type2.HstoreIgnoredCountTypeHandler"/>
    <result property="issuesCount" column="issues_by_issue_count" typeHandler="life.catalogue.db.type2.HstoreIssueCountTypeHandler"/>
    <result property="mediaByTypeCount" column="media_by_type_count" typeHandler="life.catalogue.db.type2.HstoreMediaTypeCountTypeHandler"/>
    <result property="nameRelationsByTypeCount" column="name_relations_by_type_count" typeHandler="life.catalogue.db.type2.HstoreNameRelCountTypeHandler"/>
    <result property="namesByCodeCount" column="names_by_code_count" typeHandler="life.catalogue.db.type2.HstoreCodeCountTypeHandler"/>
    <result property="namesByRankCount" column="names_by_rank_count" typeHandler="life.catalogue.db.type2.HstoreRankCountTypeHandler"/>
    <result property="namesByStatusCount" column="names_by_status_count" typeHandler="life.catalogue.db.type2.HstoreNomStatusCountTypeHandler"/>
    <result property="namesByTypeCount" column="names_by_type_count" typeHandler="life.catalogue.db.type2.HstoreNameTypeCountTypeHandler"/>
    <result property="namesByMatchTypeCount" column="names_by_match_type_count" typeHandler="life.catalogue.db.type2.HstoreNameMatchTypeCountTypeHandler"/>
    <result property="speciesInteractionsByTypeCount" column="species_interactions_by_type_count" typeHandler="life.catalogue.db.type2.HstoreSpeciesInteractionCountTypeHandler"/>
    <result property="synonymsByRankCount" column="synonyms_by_rank_count" typeHandler="life.catalogue.db.type2.HstoreRankCountTypeHandler"/>
    <result property="taxaByRankCount" column="taxa_by_rank_count" typeHandler="life.catalogue.db.type2.HstoreRankCountTypeHandler"/>
    <result property="taxaByScrutinizerCount" column="taxa_by_scrutinizer_count" typeHandler="life.catalogue.db.type2.HstoreStringCountTypeHandler"/>
    <result property="taxonConceptRelationsByTypeCount" column="taxon_concept_relations_by_type_count" typeHandler="life.catalogue.db.type2.HstoreTaxonConceptRelCountTypeHandler"/>
    <result property="typeMaterialByStatusCount" column="type_material_by_status_count" typeHandler="life.catalogue.db.type2.HstoreTypeStatusCountTypeHandler"/>
    <result property="usagesByOriginCount" column="usages_by_origin_count" typeHandler="life.catalogue.db.type2.HstoreOriginCountTypeHandler"/>
    <result property="usagesByStatusCount" column="usages_by_status_count" typeHandler="life.catalogue.db.type2.HstoreTaxStatusCountTypeHandler"/>
    <result property="vernacularsByLanguageCount" column="vernaculars_by_language_count" typeHandler="life.catalogue.db.type2.HstoreStringCountTypeHandler"/>
    <result property="secondarySourceByInfoCount" column="secondary_source_by_info_count" typeHandler="life.catalogue.db.type2.HstoreInfoGroupCountTypeHandler"/>
  </resultMap>

  <select id="get" resultMap="datasetImportResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE di.dataset_key=#{key} AND di.attempt=#{attempt}
  </select>

  <select id="getNext" resultMap="datasetImportResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE di.dataset_key=#{key} AND di.attempt > #{attempt} AND di.state=#{state}::IMPORTSTATE
    ORDER BY di.attempt
    LIMIT 1
  </select>

  <select id="getMD5" resultType="string">
    SELECT md5
    FROM <include refid="FROM"/>
    WHERE di.dataset_key=#{key} AND di.attempt=#{attempt}
  </select>

  <select id="last" resultMap="datasetImportResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE di.dataset_key=#{key}
    ORDER BY di.attempt DESC, di.started DESC
    LIMIT 1
  </select>

  <select id="current" resultMap="datasetImportResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
      JOIN dataset d on d.key=di.dataset_key
    WHERE di.dataset_key=#{key} and di.attempt=d.attempt
  </select>

  <select id="count" resultType="integer">
    SELECT count(*)
    FROM <include refid="FROM"/>
    <include refid="WHERE"/>
  </select>

  <select id="list" resultMap="datasetImportResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    <include refid="WHERE"/>
    ORDER BY coalesce(di.started, di.finished) DESC NULLS LAST, di.attempt DESC, di.dataset_key
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="countBareName" resultType="integer">
    SELECT count(*)
    FROM name n LEFT JOIN name_usage u ON u.dataset_key = #{key} AND n.id = u.name_id
    WHERE n.dataset_key = #{key} AND u.id IS NULL
  </select>
  <select id="countDistribution" resultType="integer">
    SELECT count(*) FROM distribution WHERE dataset_key = #{key}
  </select>
  <select id="countEstimate" resultType="integer">
    SELECT count(*) FROM estimate WHERE dataset_key = #{key}
  </select>
  <select id="countMedia" resultType="integer">
    SELECT count(*) FROM media WHERE dataset_key = #{key}
  </select>
  <select id="countName" resultType="integer">
    SELECT count(*) FROM name WHERE dataset_key = #{key}
  </select>
  <select id="countTypeMaterial" resultType="integer">
    SELECT count(*) FROM type_material WHERE dataset_key = #{key}
  </select>
  <select id="countReference" resultType="integer">
    SELECT count(*) FROM reference WHERE dataset_key = #{key}
  </select>
  <select id="countTaxon" resultType="integer">
    SELECT count(*) FROM name_usage WHERE dataset_key = #{key} AND NOT is_synonym(status)
  </select>
  <select id="countSynonym" resultType="integer">
    SELECT count(*) FROM name_usage WHERE dataset_key = #{key} AND is_synonym(status)
  </select>
  <select id="countTreatment" resultType="integer">
    SELECT count(*) FROM treatment WHERE dataset_key = #{key}
  </select>
  <select id="countVerbatim" resultType="integer">
    SELECT count(*) FROM verbatim WHERE dataset_key = #{key}
  </select>
  <select id="countVernacular" resultType="integer">
    SELECT count(*) FROM vernacular_name WHERE dataset_key = #{key}
  </select>

  <select id="countDistributionsByGazetteer" resultType="StringCount">
    SELECT gazetteer AS key, count(*) AS count
    FROM distribution WHERE dataset_key = #{key}
    GROUP BY gazetteer
  </select>
  <select id="countIssues" resultType="StringCount">
    SELECT iss AS key, count(*) AS count FROM (
    SELECT unnest(issues) iss FROM verbatim WHERE dataset_key = #{key}
    ) AS dis
    GROUP BY iss
  </select>
  <select id="countProjectIssues" resultType="StringCount">
    SELECT iss AS key, count(*) AS count FROM (
    SELECT unnest(issues) iss FROM verbatim_source WHERE dataset_key = #{key}
    ) AS dis
    GROUP BY iss
  </select>
  <select id="countMediaByType" resultType="StringCount">
    SELECT type AS key, count(*) AS count
    FROM media WHERE dataset_key = #{key}
    GROUP BY type
  </select>

  <select id="countMergedSynonymsByRank" resultType="StringCount">
    SELECT n.rank AS key, count(*) AS count
    FROM name_usage t
           JOIN name n ON t.name_id=n.id AND n.dataset_key=t.dataset_key
           JOIN sector s ON s.id=t.sector_key AND s.dataset_key=t.dataset_key
    WHERE t.dataset_key=#{key} AND is_synonym(t.status) AND s.mode='MERGE'
    GROUP BY n.rank
  </select>
  <select id="countMergedTaxaByRank" resultType="StringCount">
    SELECT n.rank AS key, count(*) AS count
    FROM name_usage t
           JOIN name n ON t.name_id=n.id AND n.dataset_key=t.dataset_key
           JOIN sector s ON s.id=t.sector_key AND s.dataset_key=t.dataset_key
    WHERE t.dataset_key=#{key} AND NOT is_synonym(t.status) AND s.mode='MERGE'
    GROUP BY n.rank
  </select>
  <select id="countSecondarySourceByInfo" resultType="StringCount">
    SELECT type AS key, count(*) AS count
    FROM verbatim_source_secondary x
    WHERE x.dataset_key=#{key}
    GROUP BY type
  </select>

  <select id="countNamesByType" resultType="StringCount">
    SELECT type AS key, count(*) AS count
    FROM name WHERE dataset_key = #{key}
    GROUP BY type
  </select>
  <select id="countNamesByMatchType" resultType="StringCount">
    SELECT type AS key, count(*) AS count
    FROM name_match WHERE dataset_key = #{key}
    GROUP BY type
  </select>
  <select id="countNameRelationsByType" resultType="StringCount">
    SELECT type AS key, count(*) AS count
    FROM name_rel WHERE dataset_key = #{key}
    GROUP BY type
  </select>
  <select id="countNamesByStatus" resultType="StringCount">
    SELECT nom_status AS key, count(*) AS count
    FROM name WHERE dataset_key = #{key}
    GROUP BY nom_status
  </select>
  <select id="countNamesByCode" resultType="StringCount">
    SELECT code AS key, count(*) AS count
    FROM name WHERE dataset_key = #{key}
    GROUP BY code
  </select>
  <select id="countNamesByRank" resultType="StringCount">
    SELECT rank AS key, count(*) AS count
    FROM name WHERE dataset_key = #{key}
    GROUP BY rank
  </select>
  <select id="countTypeMaterialByStatus" resultType="StringCount">
    SELECT status AS key, count(*) AS count
    FROM type_material WHERE dataset_key = #{key}
    GROUP BY status
  </select>
  <select id="countTaxaByRank" resultType="StringCount">
    SELECT n.rank AS key, count(*) AS count
    FROM name_usage t JOIN name n ON n.dataset_key=t.dataset_key AND t.name_id=n.id
    WHERE t.dataset_key = #{key} AND NOT is_synonym(t.status)
    GROUP BY n.rank
  </select>
  <select id="countTaxaByScrutinizer" resultType="StringCount">
    SELECT coalesce(t.scrutinizer_id,t.scrutinizer) AS key, count(*) AS count
    FROM name_usage t
    WHERE t.dataset_key = #{key} AND NOT is_synonym(t.status)
    GROUP BY 1
  </select>
  <select id="countExtinctTaxaByRank" resultType="StringCount">
    SELECT n.rank AS key, count(*) AS count
    FROM name_usage t JOIN name n ON n.dataset_key=t.dataset_key AND  t.name_id=n.id
    WHERE t.dataset_key = #{key} AND NOT is_synonym(t.status) AND t.extinct
    GROUP BY n.rank
  </select>
  <select id="countSynonymsByRank" resultType="StringCount">
    SELECT n.rank AS key, count(*) AS count
    FROM name_usage t JOIN name n ON n.dataset_key=t.dataset_key AND  t.name_id=n.id
    WHERE t.dataset_key = #{key} AND is_synonym(t.status)
    GROUP BY n.rank
  </select>
  <select id="countSpeciesInteractionsByType" resultType="StringCount">
    SELECT type AS key, count(*) AS count
    FROM species_interaction WHERE dataset_key = #{key}
    GROUP BY type
  </select>
  <select id="countTaxonConceptRelationsByType" resultType="StringCount">
    SELECT type AS key, count(*) AS count
    FROM taxon_concept_rel WHERE dataset_key = #{key}
    GROUP BY type
  </select>
  <select id="countUsagesByOrigin" resultType="StringCount">
    SELECT origin AS key, count(*) AS count
    FROM name_usage WHERE dataset_key = #{key}
    GROUP BY origin
  </select>
  <select id="countUsagesByStatus" resultType="StringCount">
    SELECT status AS key, count(*) AS count
    FROM name_usage WHERE dataset_key = #{key}
    GROUP BY status
  </select>
  <select id="countVerbatimByType" resultType="StringCount">
    SELECT type AS key, count(*) AS count
    FROM verbatim WHERE dataset_key = #{key}
    GROUP BY type
  </select>
  <select id="countVerbatimTerms" resultType="StringCount">
    SELECT t AS key, count(*) AS count
    FROM verbatim, lateral jsonb_object_keys(terms) AS t
    WHERE dataset_key = #{key} AND type = #{rowType, typeHandler=life.catalogue.db.type.TermTypeHandler}
    GROUP BY t
  </select>
  <select id="countVernacularsByLanguage" resultType="StringCount">
    SELECT language AS key, count(*) AS count
    FROM vernacular_name WHERE dataset_key = #{key}
    GROUP BY language
  </select>

  <insert id="create" parameterType="DatasetImport">
    <selectKey keyProperty="imp.attempt" resultType="integer" order="BEFORE">
      SELECT coalesce(max(attempt)+1, 1)
      FROM dataset_import
      WHERE dataset_key=#{imp.datasetKey}
    </selectKey>
    INSERT INTO dataset_import (<include refid="COLS"/>, attempt)
    VALUES (<include refid="PROPS"/>, #{imp.attempt})
  </insert>

  <update id="update" parameterType="DatasetImport">
    UPDATE dataset_import
    SET (<include refid="COLS"/>) = (<include refid="PROPS"/>)
    WHERE dataset_key=#{imp.datasetKey} AND attempt=#{imp.attempt}
  </update>

  <delete id="delete" parameterType="map">
    DELETE FROM dataset_import
    WHERE dataset_key=#{key} AND attempt=#{attempt}
  </delete>

  <delete id="deleteByDataset" parameterType="map">
    DELETE FROM dataset_import
    WHERE dataset_key=#{datasetKey}
  </delete>
</mapper>
