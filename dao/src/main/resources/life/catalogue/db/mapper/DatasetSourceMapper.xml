<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.DatasetSourceMapper">

  <sql id="SELECT">
    <include refid="life.catalogue.db.mapper.DatasetArchiveMapper.SELECT"/>,
    con.key AS containerKey,
    con.title AS containerTitle,
    con.publisher AS containerPublisher,
    con.issued AS containerIssued,
    con.version AS containerVersion,
    con.creator[:coalesce((con.settings->>'source max container authors')::int, 100)] AS containerCreator
  </sql>

  <sql id="SELECT_SIMPLE">
    d.key,
    d.doi,
    d.identifier,
    d.title,
    d.alias,
    d.issued,
    d.version,
    d.issn,
    d.contact,
    d.creator,
    d.editor,
    d.publisher,
    d.keyword,
    d.geographic_scope,
    d.taxonomic_scope,
    d.temporal_scope,
    d.confidence,
    d.completeness,
    d.license,
    d.url,
    d.logo,
    d.url_formatter,
    d.notes,
    d.created,
    d.created_by,
    d.modified,
    d.modified_by,

    d.gbif_key,
    d.gbif_publisher_key,
    d.attempt,
    d.origin,
    d.type,
    d.source_key
  </sql>

  <sql id="COLS">
    <include refid="life.catalogue.db.mapper.DatasetArchiveMapper.COLS"/>
  </sql>

  <sql id="PROPS">
    #{obj.type}::datasettype,
    #{obj.gbifKey},
    #{obj.gbifPublisherKey},
    <include refid="life.catalogue.db.mapper.DatasetPatchMapper.PROPS"/>
  </sql>

  <sql id="FROM">
    dataset_source d
    LEFT JOIN dataset_import di ON d.attempt=di.attempt AND d.key=di.dataset_key
    LEFT JOIN dataset con ON con.key = #{datasetKey}
  </sql>

  <sql id="FROM_SIMPLE">
    dataset_source d
  </sql>

  <resultMap id="datasetSimpleResultMap" type="Dataset" autoMapping="true">
    <id property="key" column="key"/>
    <result property="privat" column="private"/>
    <result property="contact" column="contact" typeHandler="life.catalogue.db.type.AgentTypeHandler"/>
    <result property="creator" column="creator" typeHandler="life.catalogue.db.type.AgentArrayTypeHandler"/>
    <result property="editor" column="editor" typeHandler="life.catalogue.db.type.AgentArrayTypeHandler"/>
    <result property="publisher" column="publisher" typeHandler="life.catalogue.db.type.AgentTypeHandler"/>
    <result property="identifier" column="identifier" typeHandler="life.catalogue.db.type2.HstoreMapTypeHandler"/>
    <result property="urlFormatter" column="url_formatter" typeHandler="life.catalogue.db.type2.HstoreMapTypeHandler"/>
  </resultMap>

  <resultMap id="datasetSourceReleaseResultMap" type="Dataset" extends="datasetSourceProjectResultMap">
    <id property="key" column="key"/>
    <collection property="source" ofType="Citation" column="{datasetKey=key, releaseKey=dataset_key}" select="life.catalogue.db.mapper.CitationMapper.listRelease" />
  </resultMap>

  <resultMap id="datasetSourceProjectResultMap" type="Dataset" extends="life.catalogue.db.mapper.DatasetMapper.datasetResultMap">
    <id property="key" column="key"/>
    <result property="containerCreator" column="containerCreator" typeHandler="life.catalogue.db.type.AgentArrayTypeHandler"/>
    <result property="publisher" column="containerPublisher" typeHandler="life.catalogue.db.type.AgentTypeHandler"/>
    <result property="issued" column="containerIssued" />
    <result property="version" column="containerVersion" />
  </resultMap>

  <sql id="SECTOR_SUBJECT_DATASETS">
    WITH src AS (
      SELECT s.subject_dataset_key AS key, d.attempt AS dattempt, max(s.dataset_attempt) AS attempt
      FROM sector s JOIN dataset d ON d.key=s.subject_dataset_key
      WHERE s.dataset_key=#{datasetKey}
        AND NOT EXISTS (SELECT TRUE FROM sector_publisher p WHERE p.id=d.gbif_publisher_key AND p.dataset_key = #{datasetKey})
        AND EXISTS (SELECT TRUE FROM name_usage u WHERE u.sector_key=s.id AND u.dataset_key = #{datasetKey})
      GROUP BY 1,2
    )
  </sql>

  <select id="listSectorBasedSources" parameterType="map" resultMap="datasetSourceProjectResultMap" resultOrdered="true" fetchSize="100" resultSetType="FORWARD_ONLY">
    <include refid="SECTOR_SUBJECT_DATASETS"/>
    <!-- archived dataset metadata -->
    SELECT <include refid="SELECT"/>
    FROM src
      LEFT JOIN dataset_archive d ON d.key = src.key AND d.attempt = src.attempt
      LEFT JOIN dataset_import di ON di.dataset_key = d.key AND di.attempt = d.attempt
      LEFT JOIN dataset con ON con.key = #{datasetKey}
    WHERE src.attempt != src.dattempt

    UNION

    <!-- latest dataset metadata -->
    SELECT <include refid="SELECT"/>
    FROM src
      JOIN dataset d ON d.key = src.key
      LEFT JOIN dataset_import di ON di.dataset_key = src.key AND di.attempt = d.attempt
      LEFT JOIN dataset con ON con.key = #{datasetKey}
    WHERE src.attempt = src.dattempt OR src.attempt IS NULL

    ORDER BY 1
  </select>

  <select id="listProjectSourcesSimple" parameterType="map" resultMap="datasetSimpleResultMap" resultOrdered="true" fetchSize="100" resultSetType="FORWARD_ONLY">
    <include refid="SECTOR_SUBJECT_DATASETS"/>
    <!-- archived dataset metadata -->
    SELECT <include refid="SELECT_SIMPLE"/>
    FROM src
      LEFT JOIN dataset_archive d ON d.key = src.key AND d.attempt = src.attempt
    WHERE src.attempt != src.dattempt

    UNION

    <!-- latest dataset metadata -->
    SELECT <include refid="SELECT_SIMPLE"/>
    FROM src
      JOIN dataset d ON d.key = src.key
    WHERE src.attempt = src.dattempt OR src.attempt IS NULL

    ORDER BY 1
  </select>

  <select id="listReleaseSources" parameterType="map" resultMap="datasetSourceReleaseResultMap" resultOrdered="true" fetchSize="100" resultSetType="FORWARD_ONLY">
    SELECT d.dataset_key, <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE d.dataset_key = #{datasetKey}
      AND NOT EXISTS (SELECT TRUE FROM sector_publisher p WHERE p.id=d.gbif_publisher_key AND p.dataset_key = #{datasetKey})
  </select>

  <select id="listReleaseSourcesSimple" parameterType="map" resultMap="datasetSimpleResultMap" resultOrdered="true" fetchSize="100" resultSetType="FORWARD_ONLY">
    SELECT d.dataset_key, <include refid="SELECT_SIMPLE"/>
    FROM <include refid="FROM_SIMPLE"/>
    WHERE d.dataset_key = #{datasetKey}
      AND NOT EXISTS (SELECT TRUE FROM sector_publisher p WHERE p.id=d.gbif_publisher_key AND p.dataset_key = #{datasetKey})
  </select>

  <select id="listReleaseSourcesAuthorsOnly" parameterType="map" resultMap="life.catalogue.db.mapper.DatasetMapper.datasetResultMap" resultOrdered="true" fetchSize="500" resultSetType="FORWARD_ONLY">
    SELECT d.dataset_key, d.key, d.source_key, d.doi, d.attempt, d.origin, d.type, d.title, d.alias, d.issued, d.version,
      d.contact, d.creator, d.editor, d.publisher, d.contributor, d.license
    FROM dataset_source d
    WHERE d.dataset_key = #{datasetKey}
  </select>

  <select id="getProjectSource" resultMap="datasetSourceProjectResultMap">
    WITH src AS (
      SELECT max(s.dataset_attempt) AS attempt
      FROM sector s
      WHERE s.dataset_key=#{datasetKey} AND s.subject_dataset_key=#{key}
    )
    <!-- archived dataset metadata -->
    SELECT <include refid="SELECT"/>
    FROM src
      JOIN dataset d2 ON d2.key = #{key}
      LEFT JOIN dataset_archive d ON d.key = #{key} AND d.attempt = src.attempt
      LEFT JOIN dataset_import di ON di.dataset_key = d.key AND di.attempt = d.attempt
      LEFT JOIN dataset con ON con.key = #{datasetKey}
    WHERE src.attempt != d2.attempt

    UNION

    <!-- latest dataset metadata -->
    SELECT <include refid="SELECT"/>
    FROM src
      JOIN dataset d ON d.key = #{key}
      LEFT JOIN dataset_import di ON di.dataset_key = d.key AND di.attempt = d.attempt
      LEFT JOIN dataset con ON con.key = #{datasetKey}
    WHERE src.attempt = d.attempt OR src.attempt IS NULL
  </select>

  <select id="getReleaseSource" resultMap="datasetSourceReleaseResultMap">
    SELECT d.dataset_key, <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE d.key = #{key} AND d.dataset_key = #{datasetKey}
  </select>

  <insert id="create" parameterType="map">
    INSERT INTO dataset_source (key, dataset_key, attempt, <include refid="COLS"/>, source_key, origin,  created, modified)
    VALUES (#{obj.key}, #{datasetKey}, #{obj.attempt}, <include refid="PROPS"/>, #{obj.sourceKey}, #{obj.origin}::DATASETORIGIN, now(), now())
  </insert>

  <delete id="delete" parameterType="map">
    DELETE FROM dataset_source WHERE dataset_key = #{datasetKey} AND key = #{key};
  </delete>

  <delete id="deleteByRelease" parameterType="map">
    DELETE FROM dataset_source WHERE dataset_key = #{datasetKey};
  </delete>


  <select id="listAgents" resultMap="life.catalogue.db.mapper.DatasetMapper.datasetResultMap">
  SELECT key, contact, creator, editor, publisher, contributor FROM dataset_source
  </select>

  <update id="updateAgents" parameterType="Dataset">
    UPDATE dataset_source SET (
    contact,
    creator,
    editor,
    publisher,
    contributor
    ) = (
    #{contact, typeHandler=life.catalogue.db.type.AgentTypeHandler},
    #{creator, typeHandler=life.catalogue.db.type.AgentArrayTypeHandler},
    #{editor, typeHandler=life.catalogue.db.type.AgentArrayTypeHandler},
    #{publisher, typeHandler=life.catalogue.db.type.AgentTypeHandler},
    #{contributor, typeHandler=life.catalogue.db.type.AgentArrayTypeHandler}
    )
    WHERE key = #{key}
  </update>

</mapper>
