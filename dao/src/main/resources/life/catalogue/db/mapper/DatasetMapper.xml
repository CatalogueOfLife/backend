<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.DatasetMapper">

  <sql id="SELECT">
    <include refid="life.catalogue.db.mapper.DatasetArchiveMapper.SELECT"/>,
    d.deleted,
    d.private,
    d.last_import_attempt,
    dli.state AS last_import_state,
    <include refid="size"/> AS size
  </sql>

  <sql id="SELECT_SIMPLE">
    d.key,
    d.alias,
    d.title,
    d.issued,
    d.version
  </sql>

  <sql id="size">coalesce(uc.counter, (coalesce(di.taxon_count,0) + coalesce(di.synonym_count,0) + coalesce(di.bare_name_count,0)))</sql>

  <sql id="COLS">
    <include refid="life.catalogue.db.mapper.DatasetArchiveMapper.COLS"/>,
    deleted,
    private
  </sql>


  <sql id="PROPS">
    <include refid="life.catalogue.db.mapper.DatasetArchiveMapper.PROPS"/>,
    #{deleted},
    #{privat}
  </sql>

  <sql id="FROM">
    dataset d
      LEFT JOIN dataset_import di ON di.attempt=d.attempt AND di.dataset_key=coalesce(d.source_key,d.key)
      LEFT JOIN usage_count uc ON uc.dataset_key=d.key
      LEFT JOIN v_last_dataset_import li ON li.dataset_key=d.key AND d.origin='EXTERNAL'::DATASETORIGIN
      LEFT JOIN dataset_import dli ON dli.attempt=li.attempt AND dli.dataset_key=d.key
  </sql>

  <sql id="FROM_PROJ">
    <if test="userKey != null">
      LEFT JOIN dataset proj ON d.source_key=proj.key AND <include refid="IS_RELEASE"/>
    </if>
  </sql>

  <sql id="PRIVATE">
    <!-- magic number for admins -->
    <if test="userKey != -42">
      AND (NOT ${alias}.private <if test="userKey != null">
        OR COALESCE(${projAlias}.acl_editor, ${alias}.acl_editor) @> ARRAY[#{userKey}::int]
        OR COALESCE(${projAlias}.acl_reviewer, ${alias}.acl_reviewer) @> ARRAY[#{userKey}::int]</if>
      )
    </if>
  </sql>

  <sql id="IS_RELEASE">
    d.origin IN ('RELEASE'::DATASETORIGIN, 'XRELEASE'::DATASETORIGIN)
  </sql>

  <sql id="SEARCH_WHERE">
    d.deleted IS NULL
    <include refid="PRIVATE">
      <property name="alias" value="d"/>
      <property name="projAlias" value="proj"/>
    </include>
    <if test="req != null">
      <if test="req.q != null">
        <!-- we use dollar quoted strings with a token ($Grtz5$) to avoid escaping quotes -->
        AND d.doc @@ plainto_tsquery('dataset', f_unaccent($Grtz5$%${req.q}%$Grtz5$))
      </if>
      <if test="req.privat != null">
        AND d.private = #{req.privat}
      </if>
      <if test="req.alias != null">
        AND d.alias = #{req.alias}
      </if>
      <if test="req.code != null">
        AND d.settings @> jsonb_build_object('nomenclatural code', lower(#{req.code}))
      </if>
      <if test="req.codeIsNull">
        AND (d.settings IS NULL OR NOT d.settings ?? 'nomenclatural code')
      </if>
      <if test="req.type != null and !req.type.isEmpty()">
        AND d.type IN <foreach item="o" collection="req.type" open="(" separator="," close=")">#{o}::DATASETTYPE</foreach>
      </if>
      <if test="req.origin != null and !req.origin.isEmpty()">
        AND d.origin IN <foreach item="o" collection="req.origin" open="(" separator="," close=")">#{o}::DATASETORIGIN</foreach>
      </if>
      <if test="req.contributesTo != null">
        AND exists(
          SELECT 1 FROM sector s
            JOIN dataset pr ON pr.key=s.dataset_key
            LEFT JOIN dataset proj ON proj.key=coalesce(pr.source_key,pr.key)
          WHERE s.dataset_key=#{req.contributesTo} AND s.subject_dataset_key=d.key
          <include refid="PRIVATE">
            <property name="alias" value="d"/>
            <property name="projAlias" value="proj"/>
          </include>
        )
      </if>
      <if test="req.hasSourceDataset != null">
        AND exists(
          SELECT 1 FROM sector s JOIN dataset pr ON pr.key=s.dataset_key
          WHERE subject_dataset_key=#{req.hasSourceDataset} AND s.dataset_key=d.key
        )
      </if>
      <if test="req.releasedFrom != null">
        AND d.source_key=#{req.releasedFrom}
        AND <include refid="IS_RELEASE"/>
      </if>
      <if test="req.hasGbifKey != null">
        AND d.gbif_key
        <if test="req.hasGbifKey">
          IS NOT NULL
        </if>
        <if test="!req.hasGbifKey">
          IS NULL
        </if>
      </if>
      <if test="req.gbifKey != null">
        AND d.gbif_key=#{req.gbifKey}
      </if>
      <if test="req.gbifPublisherKey != null">
        AND d.gbif_publisher_key=#{req.gbifPublisherKey}
      </if>
      <if test="req.gbifPublisherKeyExclusion != null and !req.gbifPublisherKeyExclusion.isEmpty()">
        AND (d.gbif_publisher_key IS NULL OR d.gbif_publisher_key NOT IN <foreach item="pk" collection="req.gbifPublisherKeyExclusion" open="(" separator="," close=")">#{pk}</foreach>)
      </if>
      <if test="req.license != null and !req.license.isEmpty()">
        AND d.license IN <foreach item="o" collection="req.license" open="(" separator="," close=")">#{o}::LICENSE</foreach>
      </if>
      <if test="req.editor != null">
        AND d.acl_editor @> ARRAY[#{req.editor}::int]
      </if>
      <if test="req.reviewer != null">
        AND d.acl_reviewer @> ARRAY[#{req.reviewer}::int]
      </if>
      <if test="req.modifiedBy != null">
        AND d.modified_by = #{req.modifiedBy}
      </if>
      <if test="req.modified != null">
        AND di.finished > #{req.modified}
      </if>
      <if test="req.modifiedBefore != null">
        AND di.finished &lt; #{req.modifiedBefore}
      </if>
      <if test="req.createdBy != null">
        AND d.created_by = #{req.createdBy}
      </if>
      <if test="req.created != null">
        AND d.created > #{req.created}
      </if>
      <if test="req.createdBefore != null">
        AND d.created &lt; #{req.createdBefore}
      </if>
      <if test="req.issued != null">
        AND d.issued > #{req.issued}
      </if>
      <if test="req.issuedBefore != null">
        AND d.issued &lt; #{req.issuedBefore}
      </if>
      <if test="req.rowType != null and !req.rowType.isEmpty()">
        <foreach item="rt" collection="req.rowType" separator=""> AND exist(di.verbatim_by_term_count, '${rt}')</foreach>
      </if>
      <if test="req.minSize != null">
        AND <include refid="size"/> >= #{req.minSize}
      </if>
      <if test="req.lastImportState != null">
        AND dli.state = #{req.lastImportState}::IMPORTSTATE
      </if>
    </if>
  </sql>

  <resultMap id="datasetSimpleResultMap" type="DatasetSimple" autoMapping="true">
    <id property="key" column="key"/>
  </resultMap>

  <resultMap id="datasetGBIFResultMap" type="DatasetGBIF" autoMapping="true">
    <id property="key" column="key"/>
  </resultMap>

  <resultMap id="datasetResultMap" type="Dataset" autoMapping="true">
    <id property="key" column="key"/>
    <result property="privat" column="private"/>
    <result property="contact" column="contact" typeHandler="life.catalogue.db.type.AgentTypeHandler"/>
    <result property="creator" column="creator" typeHandler="life.catalogue.db.type.AgentArrayTypeHandler"/>
    <result property="editor" column="editor" typeHandler="life.catalogue.db.type.AgentArrayTypeHandler"/>
    <result property="publisher" column="publisher" typeHandler="life.catalogue.db.type.AgentTypeHandler"/>
    <result property="contributor" column="contributor" typeHandler="life.catalogue.db.type.AgentArrayTypeHandler"/>
    <result property="identifier" column="identifier" typeHandler="life.catalogue.db.type2.HstoreMapTypeHandler"/>
    <result property="urlFormatter" column="url_formatter" typeHandler="life.catalogue.db.type2.HstoreMapTypeHandler"/>
    <association property="conversion" javaType="life.catalogue.api.model.Dataset$UrlDescription">
      <result property="url" column="conversion_url" />
      <result property="description" column="conversion_description" />
    </association>
    <collection property="source" ofType="Citation" column="{datasetKey=key}" select="life.catalogue.db.mapper.CitationMapper.list" />
  </resultMap>

  <resultMap id="datasetAttResultMap" type="life.catalogue.db.mapper.DatasetMapper$DatasetAttempt" autoMapping="true">
    <id property="key" column="key"/>
  </resultMap>

  <resultMap id="releaseResultMap" type="life.catalogue.db.mapper.DatasetMapper$DatasetRelease" autoMapping="true">
    <id property="key" column="key"/>
  </resultMap>

  <resultMap id="settingsResultMap" type="DatasetSettings" autoMapping="false">
    <id column="key"/>
    <result property="settings" column="settings" typeHandler="life.catalogue.db.type2.SettingsTypeHandler"/>
  </resultMap>

  <resultMap id="duplicateResultMap" type="DuplicateIntKeys" autoMapping="false">
    <id column="name" property="name"/>
    <result property="keys" column="keys" typeHandler="life.catalogue.db.type.IntSetTypeHandler"/>
  </resultMap>


  <select id="listAgents" resultMap="datasetResultMap">
    SELECT key, contact, creator, editor, publisher, contributor FROM dataset
  </select>

  <update id="updateAgents" parameterType="Dataset">
    UPDATE dataset SET (
    contact,
    creator,
    editor,
    publisher,
    contributor
    ) = (
    #{contact, typeHandler=life.catalogue.db.type.AgentTypeHandler},
    #{creator, typeHandler=life.catalogue.db.type.AgentArrayTypeHandler},
    #{editor, typeHandler=life.catalogue.db.type.AgentArrayTypeHandler},
    #{publisher, typeHandler=life.catalogue.db.type.AgentTypeHandler},
    #{contributor, typeHandler=life.catalogue.db.type.AgentArrayTypeHandler}
    )
    WHERE key = #{key}
  </update>

  <select id="keys" resultType="integer">
    SELECT key
    FROM dataset
    WHERE deleted IS NULL
    <if test="type != null">
      AND type = #{type}::DATASETTYPE
    </if>
    <if test="origin != null and origin.length > 0">
      AND origin IN <foreach item="o" collection="origin" open="(" separator="," close=")">#{o}::DATASETORIGIN</foreach>
    </if>
    ORDER BY key
  </select>

  <select id="keysByPublisher" resultType="integer">
    SELECT key
    FROM dataset
    WHERE deleted IS NULL AND gbif_publisher_key = #{publisher}
    ORDER BY key
  </select>

  <select id="process" parameterType="map" resultMap="datasetResultMap" resultOrdered="true" fetchSize="100" resultSetType="FORWARD_ONLY">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE deleted IS NULL
    <if test="filter != null">AND ${filter}</if>
  </select>

  <select id="count" resultType="integer">
    SELECT COUNT(*)
    FROM <include refid="FROM"/> <include refid="FROM_PROJ"/>
    WHERE <include refid="SEARCH_WHERE"/>
  </select>

  <select id="search" resultMap="datasetResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/> <include refid="FROM_PROJ"/>
    WHERE <include refid="SEARCH_WHERE"/>
    ORDER BY
    <bind name="rev" value="false"/>
    <choose>
      <when test="req == null || req.sortBy == null">
        key
      </when>
      <otherwise>
        <bind name="rev" value="req.reverse"/>
        <bind name="sortBy" value="req.sortBy.name()"/>
        <choose>
          <when test="sortBy == 'RELEVANCE'">
            ts_rank_cd('{0.001, 0.01, 0.1, 1.0}'::float4[], d.doc, plainto_tsquery('dataset', f_unaccent(#{req.q}))) DESC, size DESC, created DESC
          </when>
          <when test="sortBy == 'SIZE' || sortBy == 'CREATED' || sortBy == 'MODIFIED' || sortBy == 'IMPORTED' ">
            ${req.sortBy.name().toLowerCase()}
            <bind name="rev" value="!req.reverse"/>
          </when>
          <when test="sortBy == 'CREATOR'">
            lower( coalesce( (d.creator[1]).family, (d.editor[1]).family ))
          </when>
          <when test="sortBy == 'ALIAS'">
            lower(d.alias)
          </when>
          <when test="sortBy == 'TITLE'">
            lower(d.title)
          </when>
          <otherwise>
            ${req.sortBy.name().toLowerCase()}
          </otherwise>
        </choose>
        <if test="sortBy != 'RELEVANCE'">
          <choose>
            <when test="rev">DESC NULLs LAST</when>
            <otherwise>ASC NULLs LAST</otherwise>
          </choose>
        </if>
      </otherwise>
    </choose>
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="suggest" resultMap="datasetSimpleResultMap">
    SELECT <include refid="SELECT_SIMPLE"/>
    FROM dataset d
    WHERE d.deleted IS NULL
      <if test="contributesTo != null">
        AND exists(
        SELECT 1 FROM sector s
        WHERE s.dataset_key=#{contributesTo} AND s.subject_dataset_key=d.key
        <if test="!inclMerge">
          AND s.mode != 'MERGE'
        </if>
        )
      </if>
      <if test="q != null">
        <!-- we use dollar quoted strings with a token ($gbif$) to avoid escaping quotes -->
        AND (f_unaccent(alias) ILIKE f_unaccent($gbif$%${q}%$gbif$) OR f_unaccent(title) ILIKE f_unaccent($gbif$%${q}%$gbif$))
      </if>
    ORDER BY alias NULLS LAST, title
    LIMIT 25
  </select>

  <select id="searchKeys" resultType="integer">
    SELECT d.key
    FROM <include refid="FROM"/> <include refid="FROM_PROJ"/>
    WHERE <include refid="SEARCH_WHERE"/>
    ORDER BY key
  </select>

  <select id="list" resultMap="datasetResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE deleted IS NULL AND NOT private
    ORDER BY key
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="listReleaseKeys" resultType="integer">
    SELECT d.key
    FROM dataset d
    WHERE <include refid="IS_RELEASE"/> AND d.source_key=#{projectKey} AND d.deleted IS NULL
  </select>

  <select id="listReleases" resultMap="datasetResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE <include refid="IS_RELEASE"/> AND d.source_key=#{projectKey}
    ORDER BY d.created, d.key
  </select>

  <select id="listReleasesQuick" resultMap="releaseResultMap">
    SELECT key, source_key AS projectKey, attempt, origin
    FROM dataset d
    WHERE <include refid="IS_RELEASE"/> AND d.source_key=#{projectKey}
    ORDER BY d.attempt, d.key
  </select>

  <select id="duplicates" resultMap="duplicateResultMap">
    SELECT title AS name, array_agg(key) AS keys
    FROM dataset
    WHERE deleted is null
    <if test="gbifPublisherKey != null">
      AND gbif_publisher_key = #{gbifPublisherKey}
    </if>
    GROUP BY title, description
    HAVING count(*) >= #{minCount}
    ORDER BY title
  </select>

  <sql id="importable">
    d.deleted IS NULL
    AND NOT d.private
    AND d.origin = 'EXTERNAL'
    AND d.settings ->> 'data access' IS NOT NULL
    AND coalesce((d.settings ->> 'import frequency')::int, 0) >= 0
  </sql>

  <sql id="SELECT_ATT">
    key,
    alias,
    title,
    last_import_attempt
  </sql>

  <select id="listNeverImported" resultMap="datasetAttResultMap">
    SELECT <include refid="SELECT_ATT"/>, FALSE as failed
    FROM dataset d
    WHERE <include refid="importable"/>
      AND d.last_import_attempt IS NULL
    ORDER BY d.key ASC
    LIMIT #{limit}
  </select>

  <select id="listToBeImported" resultMap="datasetAttResultMap">
    WITH last_imports AS (
      SELECT dataset_key, MAX(attempt) AS attempt FROM dataset_import GROUP BY dataset_key
    )
    SELECT <include refid="SELECT_ATT"/>, di.state = 'FAILED' as failed
    FROM dataset d
      LEFT JOIN last_imports li ON li.dataset_key=d.key
      LEFT JOIN dataset_import di ON di.dataset_key=d.key AND di.attempt = li.attempt
    WHERE <include refid="importable"/>
      AND coalesce((d.settings ->> 'import frequency')::int, #{defaultFrequency}) > 0
      AND di.state != 'WAITING'::importstate
      AND (d.last_import_attempt + coalesce((d.settings ->> 'import frequency')::int, #{defaultFrequency}) * interval '1 day') &lt; now()
      AND d.last_import_attempt IS NOT NULL
    ORDER BY d.last_import_attempt ASC, d.key
    LIMIT #{limit}
  </select>

  <select id="exists" resultType="boolean">
    SELECT EXISTS (
      SELECT 1 FROM dataset WHERE key = #{key} AND deleted IS NULL
    )
  </select>

  <select id="usageCount" resultType="integer">
    SELECT <include refid="size"/>
    FROM <include refid="FROM"/>
    WHERE d.key = #{key}
  </select>

  <select id="isPrivate" resultType="boolean">
    SELECT EXISTS (
      SELECT 1 FROM dataset WHERE key = #{key}
    ) AND (
      SELECT private FROM dataset WHERE key = #{key}
    )
  </select>

  <select id="latestRelease" resultType="integer">
    SELECT key FROM dataset
    WHERE source_key = #{key} AND deleted IS NULL
      <if test="origin != null">AND origin = #{origin}::DATASETORIGIN</if>
      <if test="public">AND NOT private</if>
      <if test="ignore != null and !ignore.isEmpty()">
        AND key NOT IN <foreach item="k" collection="ignore" open="(" separator="," close=")">#{k}</foreach>
      </if>
    ORDER BY created DESC
    LIMIT 1
  </select>

  <select id="previousRelease" resultType="integer">
    SELECT prev.key FROM dataset r JOIN dataset prev ON prev.source_key=r.source_key
    WHERE r.key = #{key}
      AND prev.deleted IS NULL
      AND NOT prev.private
      AND prev.origin=r.origin
      AND prev.key != r.key
      AND prev.created &lt; r.created
    ORDER BY prev.created DESC
    LIMIT 1
  </select>

  <select id="releaseAttempt" resultType="integer">
    SELECT key FROM dataset
    WHERE source_key = #{key} AND deleted IS NULL AND attempt = #{attempt}
    LIMIT 1
  </select>

  <select id="get" resultMap="datasetResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE key = #{key}
  </select>

  <select id="getMaxKey" parameterType="map" resultType="integer">
    SELECT max(key) FROM dataset
    <if test="limit">
      WHERE key &lt; #{limit}
    </if>
  </select>

  <select id="getKeyByGBIF" resultType="integer">
    SELECT key FROM dataset
    WHERE gbif_key = #{key}
  </select>

  <select id="getByGBIF" resultMap="datasetResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE gbif_key = #{key}
  </select>

  <select id="getPublisherKey" resultType="java.util.UUID">
    SELECT gbif_publisher_key
    FROM dataset
    WHERE key = #{key}
  </select>

  <select id="listKeysGBIF" resultType="integer">
    SELECT key
    FROM dataset
    WHERE deleted IS NULL AND gbif_key IS NOT NULL
  </select>

  <select id="listGBIF" resultMap="datasetGBIFResultMap">
    SELECT key, alias, title, version, gbif_key, gbif_publisher_key
    FROM dataset
    WHERE deleted IS NULL AND gbif_key IS NOT NULL
  </select>

  <!--  makes sure to add creator to editors if its not a bot with key<100 -->
  <insert id="create" parameterType="Dataset" useGeneratedKeys="true" keyProperty="key">
    INSERT INTO dataset (<include refid="COLS"/>, source_key, origin, created, modified, acl_editor)
    VALUES (<include refid="PROPS"/>, #{sourceKey}, #{origin}::DATASETORIGIN, now(), now(), <include refid="aclEditor"/>)
  </insert>

  <!--  makes sure to add creator to editors if its not a bot with key<100 -->
  <insert id="createWithID" parameterType="Dataset" useGeneratedKeys="false">
    INSERT INTO dataset (key,<include refid="COLS"/>, source_key, origin, created, modified, acl_editor)
    VALUES (#{key}, <include refid="PROPS"/>, #{sourceKey}, #{origin}::DATASETORIGIN, now(), now(), <include refid="aclEditor"/>)
  </insert>

  <sql id="aclEditor">
    <if test="sourceKey != null">NULL</if>
    <if test="sourceKey == null">
      <if test="createdBy &lt; 100">NULL</if>
      <if test="createdBy &gt;= 100">array[#{createdBy}::int]</if>
    </if>
  </sql>

  <select id="keysAbove" resultType="integer">
    SELECT key FROM dataset WHERE key >= #{min}
    <if test="olderThan != null"> AND created &lt; #{olderThan}</if>
  </select>

  <select id="getSettings" resultMap="settingsResultMap">
    SELECT key, settings
    FROM dataset
    WHERE key = #{key}
  </select>

  <update id="updateSettings" parameterType="map">
    UPDATE dataset SET (settings, modified_by, modified) =
      ( #{settings, typeHandler=life.catalogue.db.type2.SettingsTypeHandler}::JSONB, #{userKey}, now() )
    WHERE key = #{key}
  </update>


  <select id="getReviewer" resultType="it.unimi.dsi.fastutil.ints.IntSet">
    SELECT acl_reviewer FROM dataset WHERE key = #{key}
  </select>

  <update id="updateReviewer" parameterType="map">
    UPDATE dataset  SET (acl_reviewer, modified_by, modified) =
    ( #{reviewer, typeHandler=life.catalogue.db.type.IntSetTypeHandler}, #{userKey}, now() )
    WHERE key = #{key}
  </update>

  <update id="addReviewer" parameterType="map">
    UPDATE dataset SET (acl_reviewer, modified_by, modified) =
    ( acl_reviewer || #{reviewer}, #{userKey}, now() )
    WHERE key = #{key}
  </update>

  <update id="removeReviewer" parameterType="map">
    UPDATE dataset  SET (acl_reviewer, modified_by, modified) =
    ( array_remove(acl_reviewer, #{reviewer}), #{userKey}, now() )
    WHERE key = #{key}
  </update>

  <update id="removeReviewerEverywhere" parameterType="map">
    UPDATE dataset  SET (acl_reviewer, modified_by, modified) =
    ( array_remove(acl_reviewer, #{reviewer}), #{userKey}, now() )
    WHERE acl_reviewer @> ARRAY[#{reviewer}::int]
  </update>


  <select id="getEditors" resultType="it.unimi.dsi.fastutil.ints.IntSet">
    SELECT acl_editor FROM dataset WHERE key = #{key}
  </select>

  <update id="updateEditors" parameterType="map">
    UPDATE dataset  SET (acl_editor, modified_by, modified) =
      ( #{editor, typeHandler=life.catalogue.db.type.IntSetTypeHandler}, #{userKey}, now() )
    WHERE key = #{key}
  </update>

  <update id="addEditor" parameterType="map">
    UPDATE dataset SET (acl_editor, modified_by, modified) =
      ( acl_editor || #{editor}, #{userKey}, now() )
    WHERE key = #{key}
  </update>

  <update id="removeEditor" parameterType="map">
    UPDATE dataset  SET (acl_editor, modified_by, modified) =
      ( array_remove(acl_editor, #{editor}), #{userKey}, now() )
    WHERE key = #{key}
  </update>

  <update id="removeEditorEverywhere" parameterType="map">
    UPDATE dataset  SET (acl_editor, modified_by, modified) =
    ( array_remove(acl_editor, #{editor}), #{userKey}, now() )
    WHERE acl_editor @> ARRAY[#{editor}::int]
  </update>

  <update id="clearACL" parameterType="map">
    UPDATE dataset SET (acl_editor, acl_reviewer, modified_by, modified) = ( null, null, #{userKey}, now() )
    WHERE key = #{key}
  </update>

  <update id="update" parameterType="Dataset">
    UPDATE dataset SET (<include refid="COLS"/>, modified) = (<include refid="PROPS"/>, now())
    WHERE key = #{key}
  </update>

  <select id="lastImportAttempt" resultType="Integer">
    SELECT attempt
    FROM dataset
    WHERE key=#{key}
  </select>

  <update id="updateLastImport" parameterType="integer">
    UPDATE dataset
    SET attempt = #{attempt}
    WHERE key = #{key}
  </update>

  <update id="updateLastImportAttempt">
    UPDATE dataset
    SET last_import_attempt = now()
    WHERE key = #{key}
  </update>

  <update id="delete" parameterType="map">
    UPDATE dataset SET deleted = now(), attempt=null, alias=null, gbif_key=null, gbif_publisher_key=null
    WHERE key = #{key}
  </update>

  <delete id="deletePhysically" parameterType="map">
    DELETE FROM dataset WHERE key = #{key}
  </delete>

</mapper>
