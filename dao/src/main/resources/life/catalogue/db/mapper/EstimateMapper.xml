<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.EstimateMapper">

  <sql id="SelectVar">
    ${alias}id AS ${prefix}id,
    ${alias}dataset_key AS ${prefix}dataset_key,
    ${alias}verbatim_key AS ${prefix}verbatim_key,
    ${alias}verbatim_source_key AS ${prefix}verbatim_source_key,
    ${alias}target_id AS ${prefix}target_id,
    ${alias}target_name AS ${prefix}target_name,
    ${alias}target_authorship AS ${prefix}target_authorship,
    ${alias}target_rank AS ${prefix}target_rank,
    ${alias}target_code AS ${prefix}target_code,
    ${alias}remarks AS ${prefix}remarks,
    ${alias}modified AS ${prefix}modified,
    ${alias}modified_by AS ${prefix}modified_by,
    ${alias}created AS ${prefix}created,
    ${alias}created_by AS ${prefix}created_by,
    ${alias}estimate AS ${prefix}estimate,
    ${alias}type AS ${prefix}type,
    ${alias}reference_id AS ${prefix}reference_id
  </sql>

  <sql id="SELECT">
    t.id IS NULL AS target_broken,
    <include refid="life.catalogue.db.mapper.EstimateMapper.SelectVar">
      <property name="alias" value="est."/>
      <property name="prefix" value=""/>
    </include>
  </sql>

  <sql id="COLS">
    dataset_key,
    target_id,
    <include refid="COLS_NO_DATASETKEY"/>
  </sql>

  <sql id="COLS_NO_DATASETKEY">
    verbatim_key,
    verbatim_source_key,
    target_name,
    target_authorship,
    target_rank,
    target_code,
    remarks,
    modified,
    modified_by,
    estimate,
    type,
    reference_id
  </sql>

  <sql id="PROPS">
      #{datasetKey},
      #{target.id},
      #{verbatimKey},
      #{verbatimSourceKey},
      #{target.name},
      #{target.authorship},
      #{target.rank}::RANK,
      #{target.code}::NOMCODE,
      #{remarks},
      now(),
      #{modifiedBy},
      #{estimate},
      #{type}::ESTIMATETYPE,
      #{referenceId}
  </sql>

  <sql id="JOIN_USAGE">
    LEFT JOIN name_usage t ON t.dataset_key=est.dataset_key AND t.id=est.target_id
  </sql>

  <sql id="FROM">
    estimate est <include refid="JOIN_USAGE"/>
  </sql>

  <sql id="WHERE">
    <if test="req != null">
      <where>
        <if test="req.broken">
          t.id IS NULL
        </if>
        <if test="req.id != null">
          AND est.target_id = #{req.id}
        </if>
        <if test="req.datasetKey != null">
          AND est.dataset_key = #{req.datasetKey}
        </if>
        <if test="req.modifiedBy != null">
          AND est.modified_by = #{req.modifiedBy}
        </if>
        <if test="req.rank != null">
          AND est.target_rank = #{req.rank}::RANK
        </if>
        <if test="req.name != null">
          AND est.target_name ILIKE '%${req.name}%'
        </if>
        <if test="req.min != null">
          AND est.estimate &gt;= #{req.min}
        </if>
        <if test="req.max != null">
          AND est.estimate &lt;= #{req.max}
        </if>
      </where>
    </if>
  </sql>


  <resultMap id="estimateResultMap" type="SpeciesEstimate" autoMapping="true">
    <id property="id" column="id"/>
    <association property="target" javaType="SimpleNameLink" autoMapping="true" columnPrefix="target_"/>
  </resultMap>


  <select id="list" resultMap="estimateResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    ORDER BY est.id
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="get" resultMap="estimateResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE est.id = #{key.id} AND est.dataset_key=#{key.datasetKey}
  </select>

  <insert id="create" parameterType="SpeciesEstimate" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO estimate (id, <include refid="COLS"/>, created_by )
    VALUES (nextval('estimate_${datasetKey}_id_seq'), <include refid="PROPS"/>, #{createdBy} )
  </insert>

  <insert id="copyDataset" parameterType="map">
    INSERT INTO estimate (id, dataset_key, target_id, <include refid="COLS_NO_DATASETKEY"/>, created, created_by )
    SELECT e.id, #{newDatasetKey}, coalesce(<if test="mapIds">m.id2,</if>e.target_id), <include refid="COLS_NO_DATASETKEY"/>, created, created_by
    FROM estimate e
    <if test="mapIds">
      LEFT JOIN idmap_name_usage_${datasetKey} m ON m.id=e.target_id
    </if>
    WHERE e.dataset_key=#{datasetKey}
  </insert>

  <update id="update" parameterType="SpeciesEstimate">
    UPDATE estimate
    SET (<include refid="COLS"/>) = (<include refid="PROPS"/>)
    WHERE id = #{id} AND dataset_key=#{datasetKey}
  </update>

  <delete id="delete" parameterType="map">
    DELETE FROM estimate
    WHERE id = #{key.id} AND dataset_key=#{key.datasetKey}
  </delete>

  <delete id="deleteByDataset" parameterType="map">
    DELETE FROM estimate WHERE dataset_key = #{datasetKey}
  </delete>

  <select id="count" resultType="integer">
    SELECT count(*)
    FROM estimate est
    WHERE est.dataset_key=#{datasetKey}
  </select>

  <select id="search" resultMap="estimateResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    <include refid="WHERE"/>
    ORDER BY est.target_rank, est.target_name
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="processSearch" resultMap="estimateResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    <include refid="WHERE"/>
    ORDER BY est.target_rank, est.target_name
  </select>

  <select id="countSearch" resultType="int">
    SELECT count(*)
    FROM estimate est
    <if test="req.broken">
      <include refid="JOIN_USAGE"/>
    </if>
    <include refid="WHERE"/>
  </select>

  <select id="processDataset" parameterType="map" resultMap="estimateResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE est.dataset_key=#{datasetKey}
  </select>

  <update id="updateTaxonID" parameterType="map">
    UPDATE estimate SET taxon_id=#{newTaxonID}, modified_by=#{userKey}, modified=now()
    WHERE dataset_key=#{key.datasetKey} AND taxon_id=#{key.id}
  </update>
</mapper>
