<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.TreeMapper">

  <sql id="SELECT">
    t.dataset_key,
    t.id,
    t.parent_id,
    t.status,
    t.name_phrase,
    t.extinct,
    <include refid="life.catalogue.db.mapper.NameMapper.minimalNameCols">
      <property name="alias" value="n"/>
      <property name="prefix" value=""/>
    </include>
    ,
    <choose>
      <when test="_parameter.containsKey('catalogueKey') and catalogueKey == datasetKey">
        (select count(*) from name_usage c WHERE c.dataset_key=#{datasetKey} AND c.parent_id=t.id AND NOT is_synonym(c.status) <if test="_parameter.containsKey('extinct') and !extinct">AND (c.extinct IS NULL OR NOT c.extinct)</if>)
      </when>
      <when test="_parameter.containsKey('extinct') and !extinct">tm.child_extant_count</when>
      <otherwise>tm.child_count</otherwise>
    </choose> AS child_count,
    tm.species_count AS count,
    <choose>
      <when test="type == null">
        NULL AS source_dataset_keys,
        NULL AS sector_key,
        NULL AS est_id,
        NULL AS ed_id
      </when>
      <otherwise>
        tm.source_dataset_keys,
        s.subject_dataset_key AS sector_dataset_key,
        s.mode AS sector_mode,
        <if test="type == @life.catalogue.api.model.TreeNode$Type@SOURCE">
          s.id AS sector_key,
          NULL AS est_id,
          <include refid="life.catalogue.db.mapper.DecisionMapper.SelectVar">
            <property name="alias" value="ed."/>
            <property name="prefix" value="ed_"/>
          </include>
        </if>
        <if test="type == @life.catalogue.api.model.TreeNode$Type@PROJECT">
          t.sector_key AS sector_key,
          NULL AS ed_id,
          <choose>
            <when test="estimates">
              <include refid="life.catalogue.db.mapper.EstimateMapper.SelectVar">
                <property name="alias" value="est."/>
                <property name="prefix" value="est_"/>
              </include>
            </when>
            <otherwise>
              NULL AS est_id
            </otherwise>
          </choose>
        </if>
      </otherwise>
    </choose>
  </sql>

  <sql id="FROM_USAGE">
    name_usage t JOIN name n ON t.dataset_key=n.dataset_key AND t.name_id=n.id
  </sql>

  <sql id="FROM">
    <include refid="FROM_USAGE"/>
    LEFT JOIN taxon_metrics tm ON tm.dataset_key=t.dataset_key AND tm.taxon_id=t.id
    <if test="type != null">
      <if test="type == @life.catalogue.api.model.TreeNode$Type@SOURCE">
        LEFT JOIN sector s ON s.subject_id=t.id AND s.dataset_key=#{catalogueKey} AND s.subject_dataset_key=#{datasetKey}
          AND s.placeholder_rank IS NULL AND s.mode != 'MERGE'
        LEFT JOIN decision ed ON ed.subject_id=t.id AND ed.dataset_key=#{catalogueKey} AND ed.subject_dataset_key=#{datasetKey}
      </if>
      <if test="type == @life.catalogue.api.model.TreeNode$Type@PROJECT">
        LEFT JOIN sector s ON s.id=t.sector_key AND s.dataset_key=#{catalogueKey}
        <if test="estimates">
          LEFT JOIN estimate est ON est.target_id=t.id AND est.dataset_key=#{datasetKey}
        </if>
      </if>
    </if>
  </sql>

  <sql id="EXTINCT">
    <if test="!extinct">AND (t.extinct IS NULL OR NOT t.extinct)</if>
  </sql>

  <sql id="equalsParent">
    <if test="key.id==null">t.parent_id IS NULL</if>
    <if test="key.id!=null">t.parent_id = #{key.id}</if>
  </sql>

  <resultMap id="treeResultMap" type="life.catalogue.api.model.TreeNode$TreeNodeMybatis" autoMapping="true">
    <id property="id" column="id"/>
    <result property="sourceDatasetKeys" column="source_dataset_keys"/>
    <result property="sectorDatasetKey" column="sector_dataset_key"/>
    <result property="sectorMode" column="sector_mode"/>
    <association property="_name" javaType="Name" resultMap="life.catalogue.db.mapper.NameMapper.nameResultMap"/>
    <association property="decision" javaType="EditorialDecision" resultMap="life.catalogue.db.mapper.DecisionMapper.decisionResultMap" columnPrefix="ed_"
                 notNullColumn="id"/>
    <collection property="estimates" ofType="SpeciesEstimate" resultMap="life.catalogue.db.mapper.EstimateMapper.estimateResultMap" columnPrefix="est_"
                notNullColumn="id"/>
  </resultMap>

  <select id="get" resultMap="treeResultMap">
    <bind name="datasetKey" value="key.datasetKey"/>
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE t.dataset_key=#{key.datasetKey} AND t.id = #{key.id}
  </select>

  <select id="children" resultMap="treeResultMap">
    <bind name="datasetKey" value="key.datasetKey"/>
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE t.dataset_key=#{key.datasetKey}
      AND <include refid="equalsParent"/>
      AND NOT is_synonym(t.status) <include refid="EXTINCT"/>
    ORDER BY t.ordinal, n.rank, n.scientific_name
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="childrenWithPlaceholder" resultMap="treeResultMap">
    <bind name="datasetKey" value="key.datasetKey"/>
    WITH first AS (
      SELECT n.rank
      FROM
      <include refid="FROM_USAGE"/>
      WHERE t.dataset_key=#{key.datasetKey}
        AND <include refid="equalsParent"/>
        AND NOT is_synonym(status) <include refid="EXTINCT"/>
      <if test="rank!=null">
        AND n.rank > #{rank}::rank
      </if>
      ORDER BY n.rank, n.scientific_name
      LIMIT 1
    )
    SELECT
    <include refid="SELECT"/>
    FROM<include refid="FROM"/>, first
    WHERE t.dataset_key=#{key.datasetKey}
      AND <include refid="equalsParent"/>
      AND NOT is_synonym(t.status) AND first.rank=n.rank <include refid="EXTINCT"/>
    ORDER BY n.rank, n.scientific_name
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="classification" resultMap="treeResultMap">
    <bind name="datasetKey" value="key.datasetKey"/>
    WITH RECURSIVE x AS(
      SELECT <include refid="SELECT"/>
      FROM <include refid="FROM"/>
      WHERE t.dataset_key=#{key.datasetKey} AND t.id = #{key.id}
    UNION
      SELECT
      <include refid="SELECT"/>
      FROM<include refid="FROM"/>, x
      WHERE t.dataset_key=#{key.datasetKey} AND t.id = x.parent_id
    )
    SELECT *
    FROM x
  </select>

  <select id="childrenRanks" resultType="Rank">
    SELECT DISTINCT n.rank
    FROM <include refid="FROM_USAGE"/>
    WHERE t.dataset_key=#{key.datasetKey}
      AND <include refid="equalsParent"/>
      AND NOT is_synonym(t.status)
    <if test="rank != null">
      AND n.rank &lt;= #{rank}::rank
    </if>
    ORDER BY n.rank
  </select>

  <select id="childrenSectors" resultType="Integer">
    SELECT DISTINCT t.sector_key
    FROM name_usage t
    <if test="rank != null">
      JOIN name n ON n.dataset_key=#{key.datasetKey} AND t.name_id=n.id
    </if>
    WHERE t.dataset_key=#{key.datasetKey}
      AND <include refid="equalsParent"/>
    <if test="rank != null">
      AND n.rank > #{rank}::rank
    </if>
  </select>

</mapper>
