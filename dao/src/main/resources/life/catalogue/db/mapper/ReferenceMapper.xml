<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.ReferenceMapper">

  <sql id="SELECT">
    r.id,
    r.dataset_key,
    r.sector_key,
    r.verbatim_key,
    r.csl,
    r.citation,
    r.year,
    r.created,
    r.created_by,
    r.modified,
    r.modified_by
  </sql>

  <sql id="COLS">
    dataset_key,
    sector_key,
    <include refid="COLS_COPY">
      <property name="alias" value=""/>
    </include>
  </sql>

  <sql id="COLS_COPY">
    ${alias}id,
    ${alias}verbatim_key,
    ${alias}verbatim_source_key,
    ${alias}csl,
    ${alias}citation,
    ${alias}year,
    ${alias}created_by,
    ${alias}modified_by
  </sql>

  <sql id="PROPS">
    #{datasetKey},
    #{sectorKey},
    #{id},
    #{verbatimKey},
    #{verbatimSourceKey},
    #{csl, typeHandler=life.catalogue.db.type.CslJsonHandler}::jsonb,
    #{citation},
    #{year},
    #{createdBy},
    #{modifiedBy}
  </sql>

  <sql id="FROM">
    reference r
    <if test="_parameter.containsKey('req') and req.issues != null and !req.issues.isEmpty()">
      JOIN verbatim v ON v.dataset_key=r.dataset_key AND v.id=r.verbatim_key
    </if>
  </sql>

  <sql id="SEARCH_WHERE">
    <if test="req != null &amp;&amp; req.sectorDatasetKey != null">
      JOIN sector s ON s.id=r.sector_key
    </if>
    <where>
      r.dataset_key=#{datasetKey}
      <if test="req != null">
        <if test="req.q != null">
          AND (r.id=#{req.q} OR r.doc @@ plainto_tsquery('reference', #{req.q}))
        </if>
        <if test="req.year != null">
          AND r.year=#{req.year}
        </if>
        <if test="req.sectorKey != null">
          AND
          <choose>
            <when test="req.getSectorKeyInt() != null">r.sector_key = #{req.getSectorKeyInt()}</when>
            <when test="req.getSectorKeyIsNull()">r.sector_key IS NULL</when>
            <otherwise>r.sector_key IS NOT NULL</otherwise>
          </choose>
        </if>
        <if test="req.sectorDatasetKey != null">
          AND s.subject_dataset_key = #{req.sectorDatasetKey}
        </if>
        <if test="req.issues != null and !req.issues.isEmpty()">
          AND v.issues @>
          <foreach item="issue" index="index" collection="req.issues" open="array[" separator="," close="]">'${issue.name()}'::ISSUE</foreach>
        </if>
      </if>
    </where>
  </sql>

  <!-- A mapping to Reference, mostly auto mapped -->
  <resultMap id="referenceResultMap" type="Reference" autoMapping="true">
    <id property="id" column="id"/>
    <result property="year" column="year"/>
    <result property="csl" column="csl" typeHandler="life.catalogue.db.type.CslJsonHandler"/>
  </resultMap>

  <select id="count" resultType="integer">
    SELECT count(*) FROM reference
    WHERE dataset_key=#{datasetKey}
  </select>

  <select id="list" resultMap="referenceResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE r.dataset_key=#{datasetKey}
    ORDER BY r.id
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="listByIds" resultMap="referenceResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE r.dataset_key=#{datasetKey} AND r.id IN
    <foreach item="k" index="idx" collection="ids" open="(" separator="," close=")">#{k}</foreach>
  </select>

  <select id="find" resultMap="referenceResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE r.dataset_key=#{datasetKey} AND r.citation=#{citation}
    <if test="sectorKey != null">
      AND r.sector_key=#{sectorKey}
    </if>
  </select>

  <select id="search" resultMap="referenceResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    <include refid="SEARCH_WHERE"/>
    ORDER BY
    <choose>
      <when test="req == null || req.sortBy == null">
        r.id
      </when>
      <otherwise>
        <bind name="sortBy" value="req.sortBy.name()"/>
        <choose>
          <when test="sortBy == 'RELEVANCE'">
            ts_rank_cd(doc, plainto_tsquery('reference', #{req.q}))
          </when>
          <when test="sortBy == 'YEAR'">
            r.year DESC NULLs LAST, r.id
          </when>
          <otherwise>
            r.id
          </otherwise>
        </choose>
      </otherwise>
    </choose>
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="searchCount" resultType="integer">
    SELECT COUNT(*)
    FROM <include refid="FROM"/>
    <include refid="SEARCH_WHERE"/>
  </select>

  <select id="get" resultMap="referenceResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE r.dataset_key=#{key.datasetKey} AND r.id = #{key.id}
  </select>

  <insert id="create" parameterType="Reference">
    INSERT INTO reference (<include refid="COLS"/>, created, modified)
    VALUES (<include refid="PROPS"/>, now(), now())
  </insert>

  <insert id="copyDataset" parameterType="map">
    INSERT INTO reference (dataset_key, sector_key, <include refid="COLS_COPY"><property name="alias" value=""/></include>, created, modified)
    SELECT #{newDatasetKey}, r.sector_key, <include refid="COLS_COPY"><property name="alias" value="r."/></include>, r.created, r.modified
    FROM reference r
    WHERE dataset_key = #{datasetKey}
  </insert>

  <update id="update" parameterType="Reference" keyProperty="id">
    UPDATE reference
    SET (<include refid="COLS"/>, created, modified) = (<include refid="PROPS"/>, now(), now())
    WHERE id = #{id} AND dataset_key=#{datasetKey}
  </update>

  <update id="updateVerbatimSourceKey" parameterType="map">
    UPDATE reference
    SET verbatim_source_key = #{vsKey}
    WHERE dataset_key = #{key.datasetKey} AND id = #{key.id}
  </update>

  <delete id="delete" parameterType="map">
    DELETE FROM reference
    WHERE dataset_key=#{key.datasetKey} AND id = #{key.id}
  </delete>

  <delete id="deleteByDataset" parameterType="map">
    DELETE FROM reference
    WHERE dataset_key=#{datasetKey}
  </delete>

  <select id="processSector" parameterType="map" resultMap="referenceResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE r.dataset_key=#{key.datasetKey} AND sector_key = #{key.id}
  </select>

  <delete id="deleteBySector" parameterType="map">
    DELETE FROM reference
    WHERE dataset_key=#{key.datasetKey} AND sector_key=#{key.id}
  </delete>

  <update id="removeSectorKey" parameterType="map">
    UPDATE reference SET sector_key = NULL, verbatim_source_key = NULL
    WHERE dataset_key=#{key.datasetKey} AND sector_key = #{key.id}
  </update>

  <sql id="tmpRefIdTable">
    CREATE TEMP TABLE IF NOT EXISTS ref_fks_${datasetKey} AS
    SELECT published_in_id AS id FROM name WHERE dataset_key=#{datasetKey} AND published_in_id IS NOT NULL
      UNION
    SELECT reference_id FROM name_rel WHERE dataset_key=#{datasetKey} AND reference_id IS NOT NULL
      UNION
    SELECT reference_id FROM type_material WHERE dataset_key=#{datasetKey} AND reference_id IS NOT NULL
      UNION
    SELECT unnest(reference_ids) FROM name_usage WHERE dataset_key=#{datasetKey} AND reference_ids IS NOT NULL
      UNION
    SELECT according_to_id FROM name_usage WHERE dataset_key=#{datasetKey} AND according_to_id IS NOT NULL
      UNION
    SELECT reference_id FROM taxon_concept_rel WHERE dataset_key=#{datasetKey} AND reference_id IS NOT NULL
      UNION
    SELECT reference_id FROM species_interaction WHERE dataset_key=#{datasetKey} AND reference_id IS NOT NULL
      UNION
    SELECT reference_id FROM vernacular_name WHERE dataset_key=#{datasetKey} AND reference_id IS NOT NULL
      UNION
    SELECT reference_id FROM media WHERE dataset_key=#{datasetKey} AND reference_id IS NOT NULL
      UNION
    SELECT reference_id FROM distribution WHERE dataset_key=#{datasetKey} AND reference_id IS NOT NULL
      UNION
    SELECT reference_id FROM estimate WHERE dataset_key = #{datasetKey} AND reference_id IS NOT NULL;

    CREATE UNIQUE INDEX IF NOT EXISTS idx_ref_fks_${datasetKey} ON ref_fks_${datasetKey} (id);
  </sql>

  <!-- WARNING!
    Relies on temp table ref_fks_${datasetKey} to exist
  -->
  <sql id="orphanWhere">
    WHERE r.dataset_key=#{datasetKey} AND NOT EXISTS (
      SELECT TRUE FROM ref_fks_${datasetKey} rfk WHERE r.id=rfk.id
    )
    <if test="before!=null">
      AND r.modified &lt; #{before}
    </if>
  </sql>

  <delete id="deleteOrphans" parameterType="map">
    <include refid="tmpRefIdTable"/>
    DELETE FROM reference r
    <include refid="orphanWhere"/>
  </delete>

  <select id="listOrphans" parameterType="map" resultMap="referenceResultMap">
    <include refid="tmpRefIdTable"/>
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    <include refid="orphanWhere"/>
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="processDataset" parameterType="map" resultMap="referenceResultMap" resultOrdered="true" fetchSize="10000" resultSetType="FORWARD_ONLY">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE r.dataset_key=#{datasetKey}
  </select>

  <select id="exists" resultType="boolean">
    SELECT exists(
      SELECT id FROM reference
      WHERE dataset_key = #{key.datasetKey} AND id = #{key.id}
    )
  </select>
</mapper>
