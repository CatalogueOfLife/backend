<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.VerbatimSourceMapper">

  <sql id="SELECT">
    v.id,
    v.dataset_key,
    v.sector_key,
    v.source_id,
    v.source_entity,
    v.source_dataset_key,
    v.issues
  </sql>

  <sql id="COLS_COPY">
    sector_key,
    source_id,
    source_entity,
    source_dataset_key,
    issues
  </sql>

  <sql id="PROPS">
    #{sectorKey},
    #{sourceId},
    #{sourceEntity}::entitytype,
    #{sourceDatasetKey},
    #{issues, typeHandler=life.catalogue.db.type.IssueSetTypeHandler}::ISSUE[]
  </sql>

  <sql id="FROM">
    verbatim_source v
  </sql>

  <resultMap id="verbatimResultMap" type="VerbatimSource" autoMapping="true">
    <result property="issues" column="issues" typeHandler="life.catalogue.db.type.IssueSetTypeHandler"/>
  </resultMap>

  <select id="getSources" resultType="life.catalogue.api.model.SecondarySource">
    SELECT source_id AS id, source_dataset_key AS datasetKey, type
    FROM verbatim_source_secondary
    WHERE dataset_key = #{key.datasetKey} AND verbatim_source_key = #{key.id}
  </select>

  <select id="get" resultMap="verbatimResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE v.dataset_key = #{key.datasetKey} AND v.id = #{key.id}
  </select>

  <select id="getByEntity" resultMap="verbatimResultMap">
    SELECT <include refid="SELECT"/>
    FROM ${table} x JOIN <include refid="FROM"/> ON x.verbatim_source_key=v.id AND x.dataset_key=v.dataset_key
    WHERE x.dataset_key = #{key.datasetKey} AND x.id = #{key.id}
  </select>

  <select id="getIssues" resultMap="verbatimResultMap">
    SELECT issues
    FROM verbatim_source
    WHERE dataset_key = #{key.datasetKey} AND id = #{key.id}
  </select>

  <insert id="create" parameterType="VerbatimSource" keyProperty="id" useGeneratedKeys="true">
    INSERT INTO verbatim_source (id,dataset_key,<include refid="COLS_COPY"/>)
    VALUES (nextval('verbatim_source_${datasetKey}_id_seq'), #{datasetKey}, <include refid="PROPS"/>)
  </insert>

  <insert id="copyDataset" parameterType="map">
    INSERT INTO verbatim_source (id,dataset_key,<include refid="COLS_COPY"/>)
    SELECT v.id,#{newDatasetKey},<include refid="COLS_COPY"/>
    FROM verbatim_source v
    WHERE dataset_key = #{datasetKey};

    INSERT INTO verbatim_source_secondary (verbatim_source_key,dataset_key,source_id,source_dataset_key)
    SELECT v.verbatim_source_key,#{newDatasetKey}, source_id,source_dataset_key
    FROM verbatim_source_secondary v
    WHERE dataset_key = #{datasetKey}
  </insert>

  <select id="processDataset" parameterType="map" resultMap="verbatimResultMap" resultOrdered="true" fetchSize="2500" resultSetType="FORWARD_ONLY">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE v.dataset_key = #{datasetKey}
  </select>

  <select id="processSector" parameterType="map" resultMap="verbatimResultMap" resultOrdered="true" fetchSize="2500" resultSetType="FORWARD_ONLY">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/> JOIN name_usage u ON v.id=u.verbatim_source_key AND v.dataset_key=u.dataset_key
    WHERE v.dataset_key = #{key.datasetKey} AND u.sector_key = #{key.id}
  </select>

  <select id="exists" resultType="boolean">
    SELECT exists(
      SELECT true FROM verbatim_source
      WHERE dataset_key = #{key.datasetKey} AND id = #{key.id}
    )
  </select>

  <update id="removeSectorKey" parameterType="map">
    <!-- nothing to do, sectorKey is no the usage table! -->
  </update>

  <update id="updateIssues" parameterType="map">
    UPDATE verbatim_source
    SET issues = #{issues, typeHandler=life.catalogue.db.type.IssueSetTypeHandler}::ISSUE[]
    WHERE dataset_key = #{key.datasetKey} AND id = #{key.id}
  </update>

  <update id="addIssues" parameterType="map">
    UPDATE verbatim_source
    SET issues = array_cat(issues, ARRAY[<foreach item="iss" collection="issues" separator=",">'${iss}'::ISSUE</foreach>])
    WHERE dataset_key = #{key.datasetKey} AND id = #{key.id}
  </update>

  <insert id="insertSource" parameterType="map">
    INSERT INTO verbatim_source_secondary (dataset_key, verbatim_source_key, type, source_dataset_key, source_id) VALUES
    <foreach item="group" collection="groups" separator=",">
    (#{key.datasetKey}, #{key.id}, #{group}::INFOGROUP, #{source.datasetKey}, #{source.id})
    </foreach>
  </insert>

  <delete id="deleteSourceGroups" parameterType="map">
    DELETE FROM verbatim_source_secondary
    WHERE dataset_key = #{key.datasetKey} AND verbatim_source_key = #{key.id}
      AND type IN <foreach item="group" collection="groups" open="(" separator="," close=")">#{group}::INFOGROUP</foreach>
  </delete>

  <delete id="deleteSources" parameterType="map">
    DELETE FROM verbatim_source_secondary
    WHERE dataset_key = #{key.datasetKey} AND verbatim_source_key = #{key.id}
  </delete>

  <update id="removeAllIssues">
    UPDATE verbatim_source
    SET issues = '{}'
    WHERE dataset_key = #{projectKey}
  </update>

  <delete id="delete" parameterType="map">
    DELETE FROM verbatim_source_secondary
    WHERE dataset_key = #{key.datasetKey} AND verbatim_source_key = #{key.id};

    DELETE FROM verbatim_source
    WHERE dataset_key = #{key.datasetKey} AND id = #{key.id}
  </delete>

  <delete id="deleteByDataset" parameterType="map">
    DELETE FROM verbatim_source_secondary
    WHERE dataset_key = #{datasetKey};

    DELETE FROM verbatim_source
    WHERE dataset_key = #{datasetKey}
  </delete>

  <delete id="deleteBySector" parameterType="map">
    DELETE FROM verbatim_source_secondary v2
    USING verbatim_source v
    WHERE v2.dataset_key = #{key.datasetKey}
      AND v.dataset_key = #{key.datasetKey}
      AND v2.verbatim_source_key=v.id
      AND v.sector_key=#{key.id};

    DELETE FROM verbatim_source v
    WHERE v.dataset_key = #{key.datasetKey}
      AND v.sector_key=#{key.id}
  </delete>

</mapper>
