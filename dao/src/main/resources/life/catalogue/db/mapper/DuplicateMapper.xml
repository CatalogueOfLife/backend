<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.DuplicateMapper">

  <resultMap id="duplicateResultMap" type="DuplicateMybatis" autoMapping="true">
    <id column="key" property="key"/>
    <result property="usages" column="ids" typeHandler="life.catalogue.db.type.StringArrayTypeHandler"/>
  </resultMap>

  <resultMap id="homonymResultMap" type="HomonymMybatis" autoMapping="true">
    <id column="key" property="key"/>
    <result property="usages" column="usages" typeHandler="life.catalogue.db.type2.HomonymArrayTypeHandler"/>
  </resultMap>

  <resultMap id="usageDecisionResultMap" type="UsageDecision" autoMapping="true">
    <id column="u.id"/>
    <association property="usage" resultMap="life.catalogue.db.mapper.NameUsageMapper.usageResultMap"/>
    <association property="decision" resultMap="life.catalogue.db.mapper.DecisionMapper.decisionResultMap" columnPrefix="ed_" notNullColumn="id"/>
    <collection property="classification" ofType="SimpleName" column="{key.id=id,key.datasetKey=dataset_key}" autoMapping="true"
                select="life.catalogue.db.mapper.TaxonMapper.classificationSimple"/>
  </resultMap>

  <resultMap id="nameDecisionResultMap" type="UsageDecision" autoMapping="true">
    <id column="n_id"/>
    <association property="usage" javaType="BareName">
      <id column="n_id"/>
      <association property="name" javaType="Name" resultMap="life.catalogue.db.mapper.NameMapper.nameResultMap" columnPrefix="n_"/>
    </association>
  </resultMap>

  <select id="namesByTableIds" resultMap="nameDecisionResultMap">
    SELECT
    <include refid="life.catalogue.db.mapper.NameMapper.nameCols">
      <property name="alias" value="n"/>
      <property name="prefix" value="n_"/>
    </include>
    ,
    coalesce(parseInt(n.combination_year), r.year) AS n_publishedInYear
    FROM name n
      JOIN duplicate_ids i ON i.id=n.id
      LEFT JOIN reference r ON n.published_in_id=r.id AND n.dataset_key=r.dataset_key
    WHERE n.dataset_key=#{datasetKey}
  </select>

  <update id="createIdTable">
    CREATE TEMPORARY TABLE duplicate_ids (id TEXT)
  </update>

  <update id="dropIdTable">
    DROP TABLE duplicate_ids
  </update>

  <insert id="insertTableIdBatch" parameterType="map">
    INSERT INTO duplicate_ids (id) VALUES <foreach collection="ids" item="id" separator=",">(#{id})</foreach>
  </insert>

  <select id="usagesByTableIds" resultMap="usageDecisionResultMap">
    SELECT
    is_synonym(u.status) AS is_synonym,
    <include refid="life.catalogue.db.mapper.TaxonMapper.taxonCols">
      <property name="alias" value="u"/>
      <property name="prefix" value=""/>
    </include>,
    <include refid="life.catalogue.db.mapper.NameMapper.nameCols">
      <property name="alias" value="n"/>
      <property name="prefix" value="n_"/>
    </include>,
    coalesce(parseInt(n.combination_year), r.year) AS n_publishedInYear,
    <include refid="life.catalogue.db.mapper.TaxonMapper.taxonCols">
      <property name="alias" value="a"/>
      <property name="prefix" value="a_"/>
    </include>,
    <include refid="life.catalogue.db.mapper.NameMapper.nameCols">
      <property name="alias" value="an"/>
      <property name="prefix" value="a_n_"/>
    </include>,
    <include refid="life.catalogue.db.mapper.DecisionMapper.SelectVar">
      <property name="alias" value="ed."/>
      <property name="prefix" value="ed_"/>
    </include>,
    <choose>
      <when test="addSrc">
        v.source_id,
        v.source_dataset_key
      </when>
      <otherwise>
        NULL as source_id,
        NULL as source_dataset_key
      </otherwise>
    </choose>
    FROM name_usage u
      JOIN duplicate_ids i ON i.id=u.id
      JOIN name n ON n.dataset_key=#{datasetKey} AND u.name_id=n.id
      LEFT JOIN name_usage a ON a.dataset_key=#{datasetKey} AND u.parent_id=a.id AND is_synonym(u.status)
      LEFT JOIN name an ON an.dataset_key=#{datasetKey} AND a.name_id=an.id
      LEFT JOIN reference r ON r.dataset_key=#{datasetKey} AND n.published_in_id=r.id
    <choose>
      <when test="addSrc">
        LEFT JOIN verbatim_source v ON v.dataset_key=#{datasetKey} AND v.id=u.verbatim_source_key
        LEFT JOIN decision ed ON ed.subject_id=v.source_id AND ed.subject_dataset_key=v.source_dataset_key AND ed.dataset_key=#{projectKey}
      </when>
      <otherwise>
        LEFT JOIN decision ed ON ed.subject_id=u.id AND ed.subject_dataset_key=#{datasetKey} AND ed.dataset_key=#{projectKey}
      </otherwise>
    </choose>
    WHERE u.dataset_key=#{datasetKey}
  </select>

  <sql id="keyCol">
    <choose>
      <when test="mode.name() == 'FUZZY'">scientific_name_normalized</when>
      <otherwise>lower(scientific_name)</otherwise>
    </choose>
  </sql>

  <sql id="commonWhereClause">
    <if test="query != null">
      AND n.scientific_name ~ '^${query}'
    </if>
    <if test="category != null">
      <if test="category.highest != null">
        AND n.rank &gt;= #{category.highest}::rank
      </if>
      <if test="category.lowest != null">
        AND n.rank &lt;= #{category.lowest}::rank
      </if>
    </if>
    <if test="ranks != null and !ranks.isEmpty()">
      AND n.rank IN (<foreach collection="ranks" item="r" separator=",">#{r}::RANK</foreach>)
    </if>
  </sql>

  <sql id="commonHavingClause">
    count(*) >= #{minSize}
    <if test="authorshipDifferent != null">
      AND count(
      <!-- count null as being different,see https://github.com/Sp2000/colplus-backend/issues/457 -->
      DISTINCT
      <choose>
        <when test="mode.name() == 'FUZZY'">COALESCE(n.authorship_normalized, '{}')</when>
        <otherwise>COALESCE(n.authorship, '')</otherwise>
      </choose>
      )
      <!-- make sure at least 2 authorships are different -->
      <if test="authorshipDifferent">&gt; 1</if>
      <!-- make sure all authorships are the same -->
      <if test="!authorshipDifferent">&lt;= 1</if>
    </if>
    <if test="rankDifferent != null">
      AND count(DISTINCT n.rank)
      <!-- make sure at least 2 ranks are different -->
      <if test="rankDifferent">&gt; 1</if>
      <!-- make sure all ranks are the same -->
      <if test="!rankDifferent">&lt;= 1</if>
    </if>
    <if test="codeDifferent != null">
      AND count(DISTINCT n.code)
      <!-- make sure at least 2 nom codes are different -->
      <if test="codeDifferent">&gt; 1</if>
      <!-- make sure all nom codes are the same -->
      <if test="!codeDifferent">&lt;= 1</if>
    </if>
  </sql>

  <sql id="duplicateNamesFromHaving">
    FROM name n
    <where>
      n.dataset_key=#{datasetKey}
      <include refid="commonWhereClause"/>
    </where>
    GROUP BY
    <include refid="keyCol"/>
    HAVING
    <include refid="commonHavingClause"/>
  </sql>

  <select id="duplicateNames" parameterType="map" resultMap="duplicateResultMap">
    SELECT <include refid="keyCol"/> AS key, array_agg(n.id) AS ids
    <include refid="duplicateNamesFromHaving"/>
    ORDER BY
    <include refid="keyCol"/>
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="countNames" parameterType="map" resultType="int">
    SELECT COUNT(*) FROM (
    SELECT <include refid="keyCol"/>
    <include refid="duplicateNamesFromHaving"/>
    ) AS dupes
  </select>

  <sql id="duplicatesFromHaving">
    FROM name_usage u
    JOIN name n ON n.dataset_key=#{datasetKey} AND u.name_id=n.id
    <if test="withDecision != null">
      LEFT JOIN decision ed ON ed.subject_id=u.id
      AND ed.subject_dataset_key=#{datasetKey}
      AND ed.dataset_key=#{projectKey}
    </if>
    <if test="sourceDatasetKey != null">
      LEFT JOIN sector s ON s.id=u.sector_key AND s.dataset_key=#{projectKey}
    </if>
    <where>
      u.dataset_key=#{datasetKey}
      <include refid="commonWhereClause"/>
      <if test="status != null and !status.isEmpty()">
        AND u.status IN (<foreach collection="status" item="st" separator=",">#{st}::TAXONOMICSTATUS</foreach>)
      </if>
      <if test="sectorKey != null and sourceOnly != null and sourceOnly">
        <!-- all names must come from the requested sector -->
        AND u.sector_key = #{sectorKey}
      </if>
      <if test="sourceDatasetKey != null and sourceOnly != null and sourceOnly">
        <!-- all names must come from the requested source dataset -->
        AND s.subject_dataset_key = #{sourceDatasetKey}
      </if>
    </where>
    GROUP BY
    <include refid="keyCol"/>
    HAVING
    <include refid="commonHavingClause"/>
    <if test="status != null and status.size() &gt; 1">
      <!-- make sure all requested status are covered at least once -->
      AND array_agg(u.status) @> array[<foreach collection="status" item="st" separator=",">#{st}::TAXONOMICSTATUS</foreach>]
    </if>
    <if test="sectorKey != null and (sourceOnly == null or !sourceOnly)">
      <!-- make sure at least one name comes from the requested sector -->
      AND array_agg(u.sector_key) @> array[${sectorKey}]
    </if>
    <if test="sourceDatasetKey != null and (sourceOnly == null or !sourceOnly)">
      <!-- make sure at least one name comes from the requested source dataset -->
      AND array_agg(s.subject_dataset_key) @> array[${sourceDatasetKey}]
    </if>
    <if test="withDecision != null">
      AND count(DISTINCT ed.id)
      <if test="withDecision">&gt; 0</if>
      <if test="!withDecision">= 0</if>
    </if>
    <if test="acceptedDifferent != null">
      AND count(DISTINCT CASE is_synonym(u.status) WHEN true THEN u.parent_id ELSE u.id END)
      <!-- make sure at least 2 parents are different -->
      <if test="acceptedDifferent">&gt; 1</if>
      <!-- make sure all parent ids are the same -->
      <if test="!acceptedDifferent">&lt;= 1</if>
    </if>
  </sql>

  <select id="duplicates" parameterType="map" resultMap="duplicateResultMap">
    SELECT <include refid="keyCol"/> AS key, array_agg(u.id) AS ids
    <include refid="duplicatesFromHaving"/>
    ORDER BY
    <include refid="keyCol"/>
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="homonyms" parameterType="map" resultMap="homonymResultMap">
    SELECT lower(scientific_name) AS key, array_agg( (u.id,u.sector_key) ) AS usages
    FROM name_usage u
      JOIN name n ON n.dataset_key=#{datasetKey} AND u.name_id=n.id
    WHERE u.dataset_key=#{datasetKey}
    <if test="status != null and !status.isEmpty()">
      AND u.status IN (<foreach collection="status" item="st" separator=",">#{st}::TAXONOMICSTATUS</foreach>)
    </if>
    GROUP BY 1
    HAVING count(*) > 1
      AND count(DISTINCT n.rank) &lt;= 1
      AND count(DISTINCT n.code) &lt;= 1
  </select>

  <sql id="543432243">
    WHERE u.dataset_key=#{datasetKey} AND u.status = 'ACCEPTED'::TAXONOMICSTATUS
  </sql>

  <select id="count" parameterType="map" resultType="int">
    SELECT COUNT(*) FROM (
      SELECT <include refid="keyCol"/>
      <include refid="duplicatesFromHaving"/>
    ) AS dupes
  </select>

</mapper>
