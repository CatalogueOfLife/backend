<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.NameUsageMapper">

  <sql id="usageCols">
    ${alias}.id AS ${prefix}id,
    ${alias}.dataset_key AS ${prefix}dataset_key,
    ${alias}.sector_key AS ${prefix}sector_key,
    ${alias}.verbatim_key AS ${prefix}verbatim_key,
    ${alias}.status AS ${prefix}status,
    ${alias}.origin AS ${prefix}origin,
    ${alias}.parent_id AS ${prefix}parent_id,
    ${alias}.name_phrase AS ${prefix}name_phrase,
    ${alias}.according_to_id AS ${prefix}according_to_id,
    ${alias}.reference_ids AS ${prefix}reference_ids,
    ${alias}.identifier AS ${prefix}identifier,
    ${alias}.remarks AS ${prefix}remarks,
    ${alias}.created AS ${prefix}created,
    ${alias}.created_by AS ${prefix}created_by,
    ${alias}.modified AS ${prefix}modified,
    ${alias}.modified_by AS ${prefix}modified_by
  </sql>

  <sql id="SELECT_BASE">
    is_synonym(u.status) AS is_synonym,
    <include refid="life.catalogue.db.mapper.TaxonMapper.taxonCols">
      <property name="alias" value="u"/>
      <property name="prefix" value=""/>
    </include>,
    <include refid="life.catalogue.db.mapper.NameMapper.nameColsNidx">
      <property name="alias" value="n"/>
      <property name="aliasNI" value="nm"/>
      <property name="prefix" value="n_"/>
    </include>
  </sql>

  <sql id="SELECT">
    <include refid="life.catalogue.db.mapper.NameUsageMapper.SELECT_BASE" />,
    r.citation AS according_to,
    <include refid="life.catalogue.db.mapper.TaxonMapper.taxonCols">
      <property name="alias" value="a"/>
      <property name="prefix" value="a_"/>
    </include>,
    ar.citation AS a_according_to,
    <include refid="life.catalogue.db.mapper.NameMapper.nameColsNidx">
      <property name="alias" value="an"/>
      <property name="aliasNI" value="anm"/>
      <property name="prefix" value="a_n_"/>
    </include>
  </sql>

  <sql id="SELECT_SIMPLE">
    u.id, u.sector_key, n.scientific_name, n.authorship, u.name_phrase, COALESCE(u.extinct, FALSE) AS extinct, n.rank, n.code, u.status, u.parent_id
  </sql>

  <sql id="SELECT_SIMPLE_CACHED">
    <include refid="SELECT_SIMPLE"/>, n.published_in_id, nm.index_id, ni.canonical_id, nm.type
  </sql>

  <sql id="SELECT_LINNEAN_USAGE">
    u.id,
    u.parent_id,
    u.sector_key,
    u.status,
    u.name_id,
    n.type,
    n.code,
    n.scientific_name,
    n.authorship,
    n.rank,
    n.uninomial,
    n.genus,
    n.infrageneric_epithet,
    n.specific_epithet,
    n.infraspecific_epithet,
    n.cultivar_epithet,
    n.basionym_authors,
    n.basionym_ex_authors,
    n.basionym_year,
    n.combination_authors,
    n.combination_ex_authors,
    n.combination_year,
    n.sanctioning_author
    <!-- MISSING:
    u.name_phrase,
    u.origin,
    n.notho,
    n.candidatus,
    n.nomenclatural_note,
    n.unparsed,
    -->
  </sql>

  <sql id="COLS_COPY">
    ${alias}sector_key,
    ${alias}verbatim_key,
    ${alias}status,
    ${alias}origin,
    ${alias}name_phrase,
    ${alias}according_to_id,
    ${alias}reference_ids,
    ${alias}identifier,
    ${alias}remarks,
    ${alias}created,
    ${alias}created_by,
    ${alias}modified,
    ${alias}modified_by,
    <!-- from TAXON -->
    ${alias}scrutinizer,
    ${alias}scrutinizer_date,
    ${alias}extinct,
    ${alias}temporal_range_start,
    ${alias}temporal_range_end,
    ${alias}environments,
    ${alias}link,
    <!-- calculated -->
    ${alias}dataset_sectors
  </sql>

  <sql id="COLS">
    dataset_key,
    sector_key,
    verbatim_key,
    parent_id,
    name_id,
    status,
    origin,
    name_phrase,
    according_to_id,
    reference_ids,
    identifier,
    remarks,
    created_by,
    modified_by
  </sql>

  <sql id="PROPS">
    #{datasetKey},
    #{sectorKey},
    #{verbatimKey},
    #{parentId},
    #{name.id},
    #{status}::TAXONOMICSTATUS,
    #{origin}::ORIGIN,
    #{namePhrase},
    #{accordingToId},
    #{referenceIds},
    #{identifier, typeHandler=life.catalogue.db.type2.IdentifierArrayTypeHandler},
    #{remarks},
    #{createdBy},
    #{modifiedBy}
  </sql>

  <sql id="FROM_SIMPLE">
    name_usage u JOIN name n ON u.dataset_key=n.dataset_key AND u.name_id=n.id
  </sql>

  <sql id="FROM_SIMPLE_PUB">
    <include refid="FROM_SIMPLE"/>
    LEFT JOIN name_match nm ON nm.dataset_key=u.dataset_key AND nm.name_id=u.name_id
    LEFT JOIN names_index ni ON nm.index_id=ni.id
  </sql>

  <sql id="FROM_BASE">
    name_usage u JOIN name n ON n.dataset_key=u.dataset_key AND n.id=u.name_id
    LEFT JOIN name_match nm ON nm.dataset_key=n.dataset_key AND nm.name_id=n.id
  </sql>

  <sql id="FROM_NO_ACCEPTED">
    <include refid="life.catalogue.db.mapper.NameUsageMapper.FROM_BASE"/>
    LEFT JOIN reference r ON r.dataset_key=u.dataset_key AND r.id=u.according_to_id
  </sql>

  <sql id="FROM_ACCEPTED">
    LEFT JOIN name_usage a ON a.id=u.parent_id AND is_synonym(u.status) AND a.dataset_key=u.dataset_key
    LEFT JOIN name an ON a.name_id=an.id AND an.dataset_key=u.dataset_key
    LEFT JOIN name_match anm ON anm.dataset_key=an.dataset_key AND anm.name_id=an.id
    LEFT JOIN reference ar ON ar.id=a.according_to_id AND ar.dataset_key=u.dataset_key
  </sql>

  <sql id="FROM">
    <include refid="life.catalogue.db.mapper.NameUsageMapper.FROM_NO_ACCEPTED"/>
    <include refid="life.catalogue.db.mapper.NameUsageMapper.FROM_ACCEPTED"/>
  </sql>

  <sql id="FROM_NIDX_BASE">
    names_index ni
    JOIN name_match nm ON nm.index_id=ni.id
    JOIN name n ON n.dataset_key=nm.dataset_key AND n.id=nm.name_id
    JOIN name_usage u ON u.dataset_key=nm.dataset_key AND u.name_id=n.id
  </sql>

  <sql id="FROM_NIDX">
    <include refid="FROM_NIDX_BASE"/>
    LEFT JOIN reference r ON r.dataset_key=u.dataset_key AND r.id=u.according_to_id
    <include refid="FROM_ACCEPTED"/>
  </sql>

  <resultMap id="usageResultMap" type="NameUsageBase" autoMapping="true">
    <id property="id" column="id"/>
    <id property="datasetKey" column="dataset_key"/>
    <discriminator column="is_synonym" javaType="boolean">
      <case value="false" resultType="Taxon" resultMap="life.catalogue.db.mapper.TaxonMapper.taxonResultMap"/>
      <case value="true" resultType="Synonym" resultMap="life.catalogue.db.mapper.SynonymMapper.synonymResultMap"/>
    </discriminator>
  </resultMap>

  <resultMap id="bareNameResultMap" type="BareName" autoMapping="true">
    <id column="n_id"/>
    <id property="datasetKey" column="dataset_key"/>
    <association property="name" javaType="Name" resultMap="life.catalogue.db.mapper.NameMapper.nameResultMap" columnPrefix="n_"/>
  </resultMap>

  <resultMap id="simpleResultMap" type="SimpleName" autoMapping="true">
    <id property="id" column="id"/>
    <result property="parent" column="parent_id"/>
    <result property="name" column="scientific_name"/>
    <result property="phrase" column="name_phrase" />
  </resultMap>

  <resultMap id="linneanUsageResultMap" type="LinneanNameUsage" autoMapping="true">
    <id property="id" column="id"/>
    <association property="combinationAuthorship" javaType="Authorship">
      <result property="authors" column="combination_authors" typeHandler="life.catalogue.db.type.StringArrayTypeHandler"/>
      <result property="exAuthors" column="combination_ex_authors" typeHandler="life.catalogue.db.type.StringArrayTypeHandler"/>
      <result property="year" column="combination_year"/>
    </association>
    <association property="basionymAuthorship" javaType="Authorship">
      <result property="authors" column="basionym_authors" typeHandler="life.catalogue.db.type.StringArrayTypeHandler"/>
      <result property="exAuthors" column="basionym_ex_authors" typeHandler="life.catalogue.db.type.StringArrayTypeHandler"/>
      <result property="year" column="basionym_year"/>
    </association>
  </resultMap>

  <resultMap id="simpleDecisionResultMap" type="SimpleNameWithDecision" autoMapping="true">
    <id property="id" column="id"/>
    <result property="parent" column="parent_id"/>
    <result property="name" column="scientific_name"/>
    <result property="phrase" column="name_phrase" />
    <association property="decision" resultMap="life.catalogue.db.mapper.DecisionMapper.decisionResultMap" columnPrefix="ed_" notNullColumn="id"/>
  </resultMap>

  <resultMap id="simpleNidxResultMap" type="SimpleNameWithNidx" autoMapping="true">
    <id property="id" column="id"/>
    <result property="parent" column="parent_id"/>
    <result property="name" column="scientific_name"/>
    <result property="phrase" column="name_phrase" />
    <result property="namesIndexId" column="index_id" />
    <result property="canonicalId" column="canonical_id" />
    <result property="namesIndexMatchType" column="type" />
  </resultMap>

  <resultMap id="simpleCachedResultMap" type="SimpleNameCached" autoMapping="true" extends="simpleNidxResultMap">
    <id property="id" column="id"/>
    <result property="sectorKey" column="sector_key" />
    <result property="publishedInID" column="published_in_id" />
  </resultMap>

  <resultMap id="simpleNidxResultMapParentName" type="SimpleNameWithNidx" autoMapping="true">
    <id property="id" column="id"/>
    <result property="name" column="scientific_name"/>
    <result property="phrase" column="name_phrase" />
    <result property="namesIndexId" column="index_id" />
    <result property="canonicalId" column="canonical_id" />
    <result property="namesIndexMatchType" column="type" />
  </resultMap>

  <resultMap id="idResultMap" type="UsageNameID" autoMapping="false">
    <id property="usageId" column="id"/>
    <result property="nameId" column="nid"/>
  </resultMap>


  <select id="count" resultType="integer">
    SELECT count(*) FROM name_usage
    WHERE dataset_key = #{datasetKey}
  </select>

  <select id="get" resultMap="usageResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE u.dataset_key = #{key.datasetKey} AND u.id = #{key.id}
  </select>

  <select id="getSimple" resultMap="simpleResultMap">
    SELECT <include refid="SELECT_SIMPLE"/>
    FROM <include refid="FROM_SIMPLE"/>
    WHERE u.dataset_key = #{key.datasetKey} AND u.id = #{key.id}
  </select>

  <select id="getSimplePub" resultMap="simpleCachedResultMap">
    SELECT <include refid="SELECT_SIMPLE_CACHED"/>
    FROM <include refid="FROM_SIMPLE_PUB"/>
    WHERE u.dataset_key = #{key.datasetKey} AND u.id = #{key.id}
  </select>

  <select id="getSimpleParent" resultMap="simpleResultMap">
    SELECT <include refid="SELECT_SIMPLE"/>
    FROM <include refid="FROM_SIMPLE"/>
      JOIN name_usage child ON child.dataset_key=u.dataset_key AND child.parent_id=u.id
    WHERE child.dataset_key = #{key.datasetKey} AND child.id = #{key.id}
  </select>

  <select id="listSimpleChildren" resultMap="simpleResultMap">
    SELECT <include refid="SELECT_SIMPLE"/>
    FROM <include refid="FROM_SIMPLE"/>
    WHERE u.dataset_key = #{key.datasetKey} AND u.parent_id = #{key.id}
      AND NOT is_synonym(u.status)
  </select>

  <select id="listSimpleSynonyms" resultMap="simpleResultMap">
    SELECT <include refid="SELECT_SIMPLE"/>
    FROM <include refid="FROM_SIMPLE"/>
    WHERE u.dataset_key = #{key.datasetKey} AND u.parent_id = #{key.id}
      AND is_synonym(u.status)
  </select>

  <select id="findSimple" resultMap="simpleResultMap">
    SELECT <include refid="SELECT_SIMPLE"/>
    FROM <include refid="FROM_SIMPLE"/>
    WHERE u.dataset_key = #{datasetKey}
    <if test="name != null">
      AND n.scientific_name = #{name}
    </if>
    <if test="sectorKey != null">
      AND u.sector_key = #{sectorKey}
    </if>
    <if test="rank != null">
      AND n.rank = #{rank}::RANK
    </if>
    <if test="status != null">
      AND u.status = #{status}::TAXONOMICSTATUS
    </if>
  </select>


  <select id="getSimpleByIdMap" resultMap="simpleResultMap">
    SELECT u.id, n.scientific_name, n.authorship, n.rank, n.code, u.status, coalesce(idp.id2, u.parent_id) AS parent_id
    FROM <include refid="FROM_SIMPLE"/>
      JOIN idmap_name_usage_${key.datasetKey} idmap ON idmap.id=u.id
      LEFT JOIN idmap_name_usage_${key.datasetKey} idp ON idp.id=u.parent_id
    WHERE u.dataset_key = #{key.datasetKey} AND idmap.id2 = #{key.id}
  </select>

  <select id="exists" resultType="boolean">
    SELECT exists(
      SELECT id FROM name_usage
      WHERE dataset_key = #{key.datasetKey} AND id = #{key.id}
    )
  </select>

  <select id="listByRegex" resultMap="simpleDecisionResultMap">
    SELECT <include refid="SELECT_SIMPLE"/>,
    <if test="projectKey == null">
      NULL AS ed_id
    </if>
    <if test="projectKey != null">
      false AS ed_subject_broken,
      <include refid="life.catalogue.db.mapper.DecisionMapper.SelectVar">
        <property name="alias" value="ed."/>
        <property name="prefix" value="ed_"/>
      </include>
    </if>
    FROM <include refid="FROM_SIMPLE"/>
    <if test="projectKey != null">
      LEFT JOIN decision ed ON ed.dataset_key=#{projectKey}
                            AND ed.subject_dataset_key = #{datasetKey}
                            AND ed.subject_id = u.id
    </if>
    WHERE u.dataset_key = #{datasetKey}
      AND n.scientific_name ~ '^${regex}'
    <if test="rank != null">
      AND n.rank = #{rank}::RANK
    </if>
    <if test="status != null">
      AND u.status = #{status}::TAXONOMICSTATUS
    </if>
    <if test="withDecision != null">
      AND ed.id IS <if test="withDecision">NOT</if> NULL
    </if>
    <if test="decisionMode != null">
      AND ed.mode = #{decisionMode}::EDITORIALDECISION_MODE
    </if>
    ORDER BY n.scientific_name
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="list" resultMap="usageResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE u.dataset_key = #{datasetKey}
    ORDER BY u.id
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="listByNameID" resultMap="usageResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE u.dataset_key = #{datasetKey} AND u.name_id=#{nameId}
    ORDER BY u.id
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="listUsageIDsByNameID" resultType="string">
    SELECT u.id
    FROM name_usage u
    WHERE u.dataset_key = #{datasetKey} AND u.name_id=#{nameId}
  </select>

  <select id="listByCanonNIDX" resultMap="simpleCachedResultMap">
    SELECT <include refid="SELECT_SIMPLE_CACHED"/>
    FROM <include refid="FROM_NIDX_BASE"/>
    WHERE nm.dataset_key = #{datasetKey} AND ni.canonical_id=#{nidx}
  </select>

  <select id="listByNamesIndexOrCanonicalID" resultMap="usageResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM_NIDX"/>
    WHERE nm.dataset_key = #{datasetKey} AND (ni.id=#{nidx} OR ni.canonical_id=#{nidx})
    ORDER BY ni.id, u.id
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="listByNamesIndexIDGlobal" resultMap="usageResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM_NIDX"/>
      LEFT JOIN dataset d ON d.key=nm.dataset_key
    WHERE ni.id=#{nidx} OR ni.canonical_id=#{nidx}
    ORDER BY ni.id, d.title, u.id
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="listByUsageID" resultMap="usageResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE u.id=#{id}
    ORDER BY u.dataset_key
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="countByNamesIndexID" resultType="integer">
    SELECT count(*)
    FROM names_index ni
      JOIN name_match nm ON nm.index_id=ni.id
      JOIN name n ON n.dataset_key=nm.dataset_key AND n.id=nm.name_id
      JOIN name_usage u ON u.dataset_key=nm.dataset_key AND u.name_id=n.id
    WHERE ni.id=#{nidx} OR ni.canonical_id=#{nidx}
    <if test="datasetKey != null">
      AND nm.dataset_key = #{datasetKey}
    </if>
  </select>

  <select id="countByUsageID" resultType="integer">
    SELECT count(*)
    FROM name_usage
    WHERE id=#{id}
  </select>

  <select id="listRelated" resultMap="usageResultMap">
    SELECT <include refid="SELECT"/>
    FROM name_usage orig
      JOIN name_match nmo ON nmo.dataset_key=orig.dataset_key AND nmo.name_id=orig.name_id
      JOIN names_index ni ON ni.id=nmo.index_id
      LEFT JOIN names_index nic ON nic.id=ni.canonical_id AND ni.id != ni.canonical_id
      LEFT JOIN names_index nia ON nia.canonical_id=ni.canonical_id AND nia.id != ni.id AND ni.id = ni.canonical_id
      JOIN name_match nm ON (nm.index_id=ni.id OR nm.index_id=nic.id OR nm.index_id=nia.id)
    <!-- now join the related usages -->
    JOIN name n ON nm.name_id=n.id AND nm.dataset_key=n.dataset_key
    JOIN name_usage u ON u.name_id=n.id AND u.dataset_key=n.dataset_key
    LEFT JOIN reference r ON r.id=u.according_to_id AND r.dataset_key=u.dataset_key
    <if test="publisherKey != null">
      JOIN dataset d ON d.key=u.dataset_key
    </if>
    <include refid="FROM_ACCEPTED"/>
    WHERE orig.dataset_key=#{key.datasetKey} AND orig.id=#{key.id}
      AND (u.dataset_key!=#{key.datasetKey} OR u.id!=#{key.id})
    <if test="datasetKeys != null and !datasetKeys.isEmpty()">
      AND n.dataset_key IN <foreach item="id" collection="datasetKeys" open="(" separator="," close=")">#{id}</foreach>
    </if>
    <if test="publisherKey != null">
      AND d.gbif_publisher_key = #{publisherKey}
    </if>
    ORDER BY u.dataset_key, u.id
  </select>

  <select id="listByName" resultMap="usageResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE u.dataset_key = #{datasetKey}
      AND lower(n.scientific_name) = lower(#{name})
    <if test="rank != null">
      AND n.rank=#{rank}::rank
    </if>
    ORDER BY u.id
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="children" resultMap="usageResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE u.dataset_key = #{key.datasetKey} AND u.parent_id = #{key.id}
    <if test="rank != null">
      AND n.rank > #{rank}::rank
    </if>
  </select>

  <select id="childrenIds" resultType="string">
    SELECT u.id
    FROM name_usage u
    WHERE u.dataset_key = #{key.datasetKey} AND u.parent_id = #{key.id}
  </select>

  <update id="updateParentIds" parameterType="map">
    UPDATE name_usage
    SET (parent_id, modified, modified_by) = (#{newParentId}, now(), #{userKey})
    WHERE dataset_key = #{datasetKey} AND parent_id = #{parentId} <if test="sectorKey != null"> AND sector_key=#{sectorKey}</if>
  </update>

  <update id="updateParentId" parameterType="map">
    UPDATE name_usage
    SET (parent_id, modified, modified_by) = (#{parentId}, now(), #{userKey})
    WHERE dataset_key = #{key.datasetKey} AND id = #{key.id}
  </update>

  <update id="updateParentAndStatus" parameterType="map">
    UPDATE name_usage
    SET (parent_id, status, modified, modified_by) = (#{parentId}, #{status}::TAXONOMICSTATUS, now(), #{userKey})
    WHERE dataset_key = #{key.datasetKey} AND id = #{key.id}
  </update>

  <insert id="copyDataset" parameterType="map">
    INSERT INTO name_usage
      (id, parent_id, name_id, dataset_key,
      <include refid="COLS_COPY"><property name="alias" value=""/></include>)
    SELECT coalesce(<if test="mapIds">mu.id2,</if>u.id), coalesce(<if test="mapIds">mp.id2,</if>u.parent_id), coalesce(<if test="mapIds">mn.id2,</if>u.name_id), #{newDatasetKey},
      <include refid="COLS_COPY"><property name="alias" value="u."/></include>
    FROM name_usage u
    <if test="mapIds">
      LEFT JOIN idmap_name_usage_${datasetKey} mu ON mu.id=u.id
      LEFT JOIN idmap_name_usage_${datasetKey} mp ON mp.id=u.parent_id
      LEFT JOIN idmap_name_${datasetKey} mn ON mn.id=u.name_id
    </if>
    WHERE dataset_key=#{datasetKey}
  </insert>

  <select id="processDataset" parameterType="map" resultMap="usageResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
    SELECT <include refid="SELECT_BASE"/>
    FROM <include refid="FROM_BASE"/>
    <where>
      u.dataset_key = #{datasetKey}
      <if test="maxRank != null">
        AND n.rank >= #{maxRank}::rank
      </if>
      <if test="minRank != null">
        AND n.rank &lt;= #{minRank}::rank
      </if>
    </where>
  </select>

  <select id="processDatasetBareNames" parameterType="map" resultMap="bareNameResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
    SELECT
    <include refid="life.catalogue.db.mapper.NameMapper.nameCols">
      <property name="alias" value="n"/>
      <property name="prefix" value="n_"/>
    </include>
    FROM name n
    LEFT JOIN name_usage u ON u.dataset_key=#{datasetKey} AND n.id = u.name_id
    <where>
      n.dataset_key=#{datasetKey}
      AND u.id IS NULL
      <if test="maxRank != null">
        AND n.rank >= #{maxRank}::rank
      </if>
      <if test="minRank != null">
        AND n.rank &lt;= #{minRank}::rank
      </if>
    </where>
  </select>

  <select id="processSector" parameterType="map" resultMap="usageResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE u.dataset_key = #{key.datasetKey} AND u.sector_key = #{key.id}
  </select>

  <delete id="deleteBySector" parameterType="map">
    DELETE FROM name_usage
    WHERE dataset_key = #{key.datasetKey} AND sector_key = #{key.id}
  </delete>

  <update id="removeSectorKey" parameterType="map">
    UPDATE name_usage SET sector_key = NULL
    WHERE dataset_key = #{key.datasetKey} AND sector_key = #{key.id}
  </update>

  <update id="createTempTable" parameterType="map">
    CREATE TEMP TABLE _tmp_nu (uid text, nid text) ON COMMIT DROP
  </update>

  <update id="indexTempTable" parameterType="map">
    CREATE INDEX ON _tmp_nu (uid);
    CREATE INDEX ON _tmp_nu (nid);
  </update>

  <insert id="addSectorSynonymsToTemp" parameterType="map">
    INSERT INTO _tmp_nu
    SELECT u.id, u.name_id FROM name_usage u
    WHERE u.dataset_key=#{key.datasetKey} AND u.sector_key = #{key.id} AND is_synonym(u.status)
  </insert>

  <insert id="addSectorBelowRankToTemp" parameterType="map">
    INSERT INTO _tmp_nu
    SELECT u.id, u.name_id
    FROM name_usage u
      JOIN name n ON n.dataset_key=u.dataset_key AND n.id=u.name_id
    WHERE u.dataset_key=#{key.datasetKey}
      AND u.sector_key = #{key.id}
      AND NOT is_synonym(u.status)
      AND n.rank > #{rank}::rank
  </insert>

  <delete id="removeFromTemp" parameterType="map">
    DELETE FROM _tmp_nu
    WHERE nid=#{nameID}
  </delete>

  <delete id="deleteByTemp" parameterType="map">
    DELETE FROM name_usage
    USING _tmp_nu tmp
    WHERE dataset_key=#{datasetKey} AND id = tmp.uid
  </delete>

  <select id="deleteSubtree" parameterType="map" resultType="String">
    WITH RECURSIVE tree AS (
      SELECT id, name_id AS nid
      FROM name_usage
      WHERE dataset_key=#{key.datasetKey} AND id=#{key.id}
    UNION
      SELECT c.id, c.name_id
      FROM name_usage c JOIN tree ON c.dataset_key=tree.dataset_key AND tree.id = c.parent_id
    )
    DELETE
    FROM name_usage u
    USING tree t
    WHERE u.dataset_key=#{key.datasetKey} AND u.id = t.id
    RETURNING t.nid;
  </select>

  <sql id="WHERE_START">
    <choose>
      <when test="param.taxonID != null">
        u.id = #{param.taxonID}
      </when>
      <otherwise>
        u.parent_id IS NULL
      </otherwise>
    </choose>
    AND NOT is_synonym(u.status)
    <if test="param.exclusion != null and !param.exclusion.isEmpty()">
      AND u.id NOT IN
      <foreach item="id" collection="param.exclusion" open="(" separator="," close=")">#{id}</foreach>
    </if>
    <if test="param.lowestRank">
      AND (n.rank &lt;= #{param.lowestRank}::rank OR n.rank = 'UNRANKED'::rank)
    </if>
  </sql>

  <sql id="WHERE_UNION">
    <if test="!param.synonyms">
      AND NOT is_synonym(u.status)
    </if>
    <if test="param.exclusion != null and !param.exclusion.isEmpty()">
      AND u.id NOT IN
      <foreach item="id" collection="param.exclusion" open="(" separator="," close=")">#{id}</foreach>
    </if>
    <if test="param.lowestRank">
      AND (n.rank &lt;= #{param.lowestRank}::rank OR n.rank = 'UNRANKED'::rank)
    </if>
  </sql>

  <sql id="DEPTH_FIRST_ROOT">
    <if test="depthFirst">
      ,concat_ws('|',<if test="orderByName">n.scientific_name, n.authorship,</if> u.id) || '|' AS path
    </if>
  </sql>
  <sql id="DEPTH_FIRST">
    <if test="depthFirst">
      ,concat_ws('|', x.path, <if test="orderByName">not is_synonym(u.status),n.scientific_name, n.authorship,</if> u.id) || '|' AS path
    </if>
  </sql>

  <select id="processTree" parameterType="map" resultMap="usageResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
    WITH RECURSIVE x AS(
      SELECT <include refid="SELECT_BASE"/> <include refid="DEPTH_FIRST_ROOT"/>
      FROM <include refid="FROM_BASE"/>
      WHERE u.dataset_key=#{param.datasetKey} AND
      <include refid="WHERE_START"/>
    UNION
      SELECT <include refid="SELECT_BASE"/> <include refid="DEPTH_FIRST"/>
      FROM <include refid="FROM_BASE"/>
      JOIN x ON x.id = u.parent_id
      <where>
        u.dataset_key=#{param.datasetKey}
        <include refid="WHERE_UNION"/>
      </where>
    )
    SELECT * FROM x
    <if test="depthFirst">ORDER BY x.path</if>
  </select>

  <select id="foreignChildren" resultMap="simpleResultMap">
    SELECT <include refid="SELECT_SIMPLE"/>
    FROM <include refid="FROM_SIMPLE"/>
      JOIN name_usage p ON p.dataset_key=#{key.datasetKey} AND p.id=u.parent_id
    WHERE u.dataset_key=#{key.datasetKey} AND p.sector_key=#{key.id}
    AND (u.sector_key IS NULL OR u.sector_key!=#{key.id})
  </select>

  <select id="sectorRoot" resultMap="simpleResultMap">
    SELECT <include refid="SELECT_SIMPLE"/>
    FROM <include refid="FROM_SIMPLE"/>
      JOIN name_usage p ON p.dataset_key=#{key.datasetKey} AND p.id=u.parent_id
    WHERE u.dataset_key=#{key.datasetKey} AND u.sector_key=#{key.id}
    AND (p.sector_key IS NULL OR p.sector_key!=#{key.id})
  </select>

  <select id="processTreeSimple" parameterType="map" resultMap="simpleResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
    WITH RECURSIVE x AS(
      SELECT <include refid="SELECT_SIMPLE"/> <include refid="DEPTH_FIRST_ROOT"/>
      FROM <include refid="FROM_SIMPLE"/>
      WHERE u.dataset_key=#{param.datasetKey} AND <include refid="WHERE_START"/>
    UNION
      SELECT <include refid="SELECT_SIMPLE"/>  <include refid="DEPTH_FIRST"/>
      FROM <include refid="FROM_SIMPLE"/>
        JOIN x ON x.id = u.parent_id
      <where>
        u.dataset_key=#{param.datasetKey}
        <include refid="WHERE_UNION"/>
      </where>
    )
    SELECT id, scientific_name, authorship, name_phrase, extinct, rank, code, status, parent_id
    FROM x
    <if test="depthFirst">ORDER BY x.path</if>
  </select>

  <select id="processTreeLinneanUsage" parameterType="map" resultMap="linneanUsageResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
    WITH RECURSIVE x AS(
      SELECT <include refid="SELECT_LINNEAN_USAGE"/> <include refid="DEPTH_FIRST_ROOT"/>
      FROM <include refid="FROM_SIMPLE"/>
      WHERE u.dataset_key=#{param.datasetKey} AND <include refid="WHERE_START"/>
    UNION
      SELECT <include refid="SELECT_LINNEAN_USAGE"/> <include refid="DEPTH_FIRST"/>
      FROM <include refid="FROM_SIMPLE"/>
      JOIN x ON x.id = u.parent_id
      <where>
        u.dataset_key=#{param.datasetKey}
        <include refid="WHERE_UNION"/>
      </where>
    )
    SELECT * FROM x
    <if test="depthFirst">ORDER BY x.path</if>
  </select>

  <select id="processTreeIds" parameterType="map" resultMap="idResultMap" resultOrdered="true" fetchSize="1000" resultSetType="FORWARD_ONLY">
    WITH RECURSIVE tree AS (
      SELECT id, name_id AS nid
      FROM name_usage
      WHERE dataset_key=#{key.datasetKey} AND id=#{key.id}
    UNION
      SELECT c.id, c.name_id
      FROM name_usage c JOIN tree ON c.dataset_key=#{key.datasetKey} AND tree.id = c.parent_id
    )
    SELECT * FROM tree;
  </select>

  <select id="processNxIds" parameterType="map" resultMap="simpleNidxResultMap" resultOrdered="true" fetchSize="2500" resultSetType="FORWARD_ONLY">
    SELECT <include refid="SELECT_SIMPLE"/>, nm.index_id, ni.canonical_id, nm.type, np.scientific_name AS parent
    FROM name_usage u
      JOIN name n ON n.dataset_key=#{datasetKey} AND n.id=u.name_id
      LEFT JOIN name_usage up ON up.dataset_key=#{datasetKey} AND up.id=u.parent_id
      LEFT JOIN name np ON np.dataset_key=#{datasetKey} AND np.id=up.name_id
      LEFT JOIN name_match nm ON nm.name_id=n.id AND nm.dataset_key=#{datasetKey}
      LEFT JOIN names_index ni ON ni.id=nm.index_id
    WHERE u.dataset_key=#{datasetKey}
    ORDER BY ni.canonical_id, ni.id
  </select>

  <select id="processIds" parameterType="map" resultType="string" resultOrdered="true" fetchSize="10000" resultSetType="FORWARD_ONLY">
    SELECT id FROM name_usage WHERE dataset_key=#{datasetKey}
    <if test="!synonyms">
      AND NOT is_synonym(status)
    </if>
  </select>

  <delete id="delete" parameterType="map">
    DELETE FROM name_usage
    WHERE dataset_key=#{key.datasetKey} AND id = #{key.id}
  </delete>

  <delete id="deleteByDataset" parameterType="map">
    DELETE FROM name_usage
    WHERE dataset_key=#{datasetKey}
  </delete>

  <select id="detectParentSynoynms" parameterType="map" resultType="string">
    SELECT u.id
    FROM name_usage u
      JOIN name_usage s ON u.parent_id=s.id AND s.dataset_key=u.dataset_key
    WHERE NOT is_synonym(u.status) AND is_synonym(s.status) AND u.parent_id IS NOT NULL AND u.dataset_key=#{datasetKey}
  </select>

  <select id="detectChainedSynonyms" parameterType="map" resultType="string">
    SELECT s1.id
    FROM name_usage s1
      JOIN name_usage s2 ON s1.parent_id=s2.id AND s1.dataset_key=s2.dataset_key
    WHERE is_synonym(s1.status) AND is_synonym(s2.status) AND s1.parent_id IS NOT NULL AND s1.dataset_key=#{datasetKey}
  </select>

  <select id="detectLoop" parameterType="map" resultType="string">
    WITH RECURSIVE parents(id) AS (
      SELECT u.id
      FROM name_usage u
      WHERE NOT is_synonym(u.status) AND u.dataset_key=#{datasetKey}
    UNION ALL
      SELECT c.id
      FROM name_usage c, parents p
      WHERE p.id = c.parent_id AND c.dataset_key=#{datasetKey}
      ) CYCLE id SET is_cycle USING path
    SELECT id FROM parents WHERE is_cycle;
  </select>

  <select id="listMissingParentIds" parameterType="map" resultType="string">
    SELECT u.id
    FROM name_usage u
    WHERE u.dataset_key=#{datasetKey} AND u.parent_id IS NOT NULL AND NOT EXISTS (
      SELECT TRUE FROM name_usage p WHERE p.dataset_key=#{datasetKey} AND p.id=u.parent_id
    )
  </select>

</mapper>
