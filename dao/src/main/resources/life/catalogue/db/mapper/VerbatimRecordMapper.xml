<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.catalogue.db.mapper.VerbatimRecordMapper">

  <sql id="SELECT">
    v.id,
    v.dataset_key,
    v.line,
    v.file,
    v.type,
    v.terms,
    v.issues
  </sql>

  <sql id="COLS">
    dataset_key,
    <include refid="COLS_NO_DATASETKEY"/>
  </sql>

  <sql id="COLS_NO_DATASETKEY">
    line,
    file,
    type,
    terms,
    issues
  </sql>

  <sql id="PROPS">
    #{datasetKey},
    #{line},
    #{file},
    #{type},
    #{terms, typeHandler=life.catalogue.db.type2.TermMapTypeHandler}::jsonb,
    #{issues, typeHandler=life.catalogue.db.type.IssueSetTypeHandler}::ISSUE[]
  </sql>

  <sql id="FROM">
    verbatim v
  </sql>

  <sql id="WHERE">
    <where>
      v.dataset_key=#{datasetKey}
      <if test="types != null and !types.isEmpty()">
        AND v.type IN
        <foreach item="type" index="index" collection="types" open="(" separator="," close=")">#{type, typeHandler=life.catalogue.db.type.TermTypeHandler}
        </foreach>
      </if>
      <if test="termValues != null and !termValues.isEmpty()">
        AND
        <choose>
          <when test="termOp.name() == 'OR'">
            <foreach item="val" index="term" collection="termValues" open="(" separator=" OR " close=")">
              v.terms @> '{"${term}": "${val}"}'
            </foreach>
          </when>
          <otherwise>
            v.terms @>
            <foreach item="val" index="term" collection="termValues" open="'{" separator="," close="}'">
              "${term}": "${val}"
            </foreach>
          </otherwise>
        </choose>
      </if>
      <if test="terms != null and !terms.isEmpty()">
        <bind name="operator" value="' ' + termOp.name() + ' '" />
        AND (
        <foreach item="term" collection="terms" index="idx">
          <if test="idx > 0"> ${operator} </if>v.terms ?? '${term}'
        </foreach>
        )
      </if>
      <if test="issues != null and !issues.isEmpty()">
        AND v.issues @>
        <foreach item="issue" index="index" collection="issues" open="array[" separator="," close="]">'${issue.name()}'::ISSUE</foreach>
      </if>
      <if test="q != null">
        AND v.doc @@ plainto_tsquery('verbatim', #{q})
      </if>
    </where>
  </sql>

  <resultMap id="verbatimResultMap" type="VerbatimRecord" autoMapping="true">
    <result property="terms" column="terms" typeHandler="life.catalogue.db.type2.TermMapTypeHandler"/>
    <result property="issues" column="issues" typeHandler="life.catalogue.db.type.IssueSetTypeHandler"/>
  </resultMap>

  <resultMap id="issueResultMap" type="SimpleWithID" autoMapping="false">
    <id property="id" column="id" />
    <result property="issues" column="issues" typeHandler="life.catalogue.db.type.IssueSetTypeHandler"/>
  </resultMap>

  <select id="count" resultType="integer">
    SELECT coalesce(
    (SELECT
    <choose>
      <when test="q != null or (terms != null and !terms.isEmpty()) or (termValues != null and !termValues.isEmpty()) or (issues != null and !issues.isEmpty()) or (types != null and !types.isEmpty())">
        count(*)
        FROM
        <include refid="FROM"/>
        <include refid="WHERE"/>
      </when>
      <otherwise>
        verbatim_count
        <include refid="life.catalogue.db.Common.fromFinishedDatasetImport"/>
      </otherwise>
    </choose>
    ), 0)
  </select>

  <select id="list" resultMap="verbatimResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    <include refid="WHERE"/>
    ORDER BY id
    <include refid="life.catalogue.db.Common.limit"/>
  </select>

  <select id="get" resultMap="verbatimResultMap">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE v.dataset_key=#{key.datasetKey} AND id = #{key.id}
  </select>

  <select id="getIssues" resultMap="verbatimResultMap">
    SELECT v.issues
    FROM <include refid="FROM"/>
    WHERE v.dataset_key=#{key.datasetKey} AND id = #{key.id}
  </select>

  <insert id="create" parameterType="VerbatimRecord" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO verbatim (<include refid="COLS"/>,id)
    VALUES (<include refid="PROPS"/>,nextval('verbatim_${datasetKey}_id_seq'))
  </insert>

  <insert id="copyDataset" parameterType="map">
    INSERT INTO verbatim (id,dataset_key,<include refid="COLS_NO_DATASETKEY"/>)
    SELECT id,#{newDatasetKey},<include refid="COLS_NO_DATASETKEY"/>
    FROM verbatim
    WHERE dataset_key = #{datasetKey}
  </insert>

  <update id="update" parameterType="VerbatimRecord" keyProperty="id">
    UPDATE verbatim
    SET issues = #{issues, typeHandler=life.catalogue.db.type.IssueSetTypeHandler}::ISSUE[]
    WHERE dataset_key=#{key.datasetKey} AND id = #{key.id}
  </update>

  <update id="addIssue" parameterType="map">
    UPDATE verbatim
    SET issues = array_append(issues, '${issue}'::ISSUE)
    WHERE dataset_key=#{key.datasetKey} AND id = #{key.id}
  </update>

  <!-- requires a base name usage table nu to exist to join to -->
  <sql id="usageIssues">
    SELECT nu.id, v.issues
      FROM nu JOIN verbatim v ON nu.uvkey=v.id
      WHERE v.dataset_key=#{datasetKey} AND array_length(v.issues, 1) > 0
    UNION
      SELECT nu.id, v.issues
      FROM nu JOIN verbatim v ON nu.nvkey=v.id
      WHERE v.dataset_key=#{datasetKey} AND array_length(v.issues, 1) > 0

    UNION
      SELECT nu.id, v.issues
      FROM nu JOIN taxon_concept_rel x ON x.taxon_id=nu.id   JOIN verbatim v ON x.verbatim_key=v.id
      WHERE v.dataset_key=#{datasetKey} AND x.dataset_key=#{datasetKey} AND array_length(v.issues, 1) > 0
    UNION
      SELECT nu.id, v.issues
      FROM nu JOIN species_interaction x ON x.taxon_id=nu.id JOIN verbatim v ON x.verbatim_key=v.id
      WHERE v.dataset_key=#{datasetKey} AND x.dataset_key=#{datasetKey} AND array_length(v.issues, 1) > 0
    UNION
      SELECT nu.id, v.issues
      FROM nu JOIN distribution x ON x.taxon_id=nu.id        JOIN verbatim v ON x.verbatim_key=v.id
      WHERE v.dataset_key=#{datasetKey} AND x.dataset_key=#{datasetKey} AND array_length(v.issues, 1) > 0
    UNION
      SELECT nu.id, v.issues
      FROM nu JOIN media x ON x.taxon_id=nu.id               JOIN verbatim v ON x.verbatim_key=v.id
      WHERE v.dataset_key=#{datasetKey} AND x.dataset_key=#{datasetKey} AND array_length(v.issues, 1) > 0
    UNION
      SELECT nu.id, v.issues
      FROM nu JOIN vernacular_name x ON x.taxon_id=nu.id     JOIN verbatim v ON x.verbatim_key=v.id
      WHERE v.dataset_key=#{datasetKey} AND x.dataset_key=#{datasetKey} AND array_length(v.issues, 1) > 0

    UNION
      SELECT nu.id, v.issues
      FROM nu JOIN type_material x ON x.name_id=nu.name_id   JOIN verbatim v ON x.verbatim_key=v.id
      WHERE v.dataset_key=#{datasetKey} AND x.dataset_key=#{datasetKey} AND array_length(v.issues, 1) > 0
    UNION
      SELECT nu.id, v.issues
      FROM nu JOIN name_rel x ON x.name_id=nu.name_id        JOIN verbatim v ON x.verbatim_key=v.id
      WHERE v.dataset_key=#{datasetKey} AND x.dataset_key=#{datasetKey} AND array_length(v.issues, 1) > 0

    UNION
      SELECT nu.id, v.issues
      FROM nu JOIN verbatim_source v ON v.id=nu.id
      WHERE v.dataset_key=#{datasetKey} AND array_length(v.issues, 1) > 0
  </sql>

  <update id="createTmpIssuesTable" parameterType="map">
    WITH nu AS (
      SELECT u.id, u.name_id, u.verbatim_key AS uvkey, n.verbatim_key AS nvkey
      FROM name_usage u JOIN name n ON u.name_id=n.id AND n.dataset_key=u.dataset_key
      WHERE u.dataset_key=#{datasetKey}
      <if test="sectorKey != null">
        AND u.sector_key = #{sectorKey}
      </if>
    )
    SELECT vs.id, array_cat_agg(vs.issues) AS issues
    INTO TEMPORARY TABLE tmp_usage_issues
    FROM (
    <include refid="usageIssues"/>
    ) vs
    GROUP BY vs.id;

    CREATE INDEX ON tmp_usage_issues (id);
    ANALYZE tmp_usage_issues;
  </update>

  <update id="createTmpVSourcesTable" parameterType="map">
    SELECT v.id, array_agg(DISTINCT v.type) AS groups, array_agg(DISTINCT v.source_dataset_key) AS sources
    INTO TEMPORARY TABLE tmp_usage_sources
    FROM verbatim_source_secondary v
    <if test="sectorKey != null">
      JOIN name_usage u ON u.dataset_key = v.dataset_key AND u.id = v.id
    </if>
    WHERE v.dataset_key=#{datasetKey}
    <if test="sectorKey != null">
      AND u.sector_key = #{sectorKey}
    </if>
    GROUP BY v.id;

    CREATE INDEX ON tmp_usage_sources (id);
    ANALYZE tmp_usage_sources;
  </update>

  <select id="processDataset" parameterType="map" resultMap="verbatimResultMap" resultOrdered="true" fetchSize="2500" resultSetType="FORWARD_ONLY">
    SELECT <include refid="SELECT"/>
    FROM <include refid="FROM"/>
    WHERE dataset_key=#{datasetKey}
  </select>

  <delete id="deleteByDataset" parameterType="map">
    DELETE FROM verbatim
    WHERE dataset_key=#{datasetKey}
  </delete>

  <select id="processIssues" parameterType="map" resultMap="issueResultMap" resultOrdered="true" fetchSize="10000" resultSetType="FORWARD_ONLY">
    SELECT id, issues
    FROM tmp_usage_issues
  </select>
</mapper>
