/*
 * Copyright 2020 Global Biodiversity Information Facility (GBIF)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package life.catalogue.doi.service;


import life.catalogue.api.model.DOI;
import life.catalogue.doi.datacite.model.DoiAttributes;

import java.net.URI;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public interface DoiService {
  Logger LOG = LoggerFactory.getLogger(DoiService.class);

  DOI fromDataset(int datasetKey);

  DOI fromDatasetSource(int datasetKey, int sourceKey);

  /**
   * Resolves the registered identifier.
   *
   * @param doi the identifier to resolve
   * @return the DOI metadata or NULL if the DOI is not found
   */
  DoiAttributes resolve(DOI doi) throws DoiException;

  /**
   * Creates a new draft DOI with the given metadata attributes.
   * A draft DOI is created which is not known to resolvers yet and can still be fully deleted.
   * If the given DOI has no suffix it will be autogenerated by DataCite.
   *
   * @throws DoiExistsException if the DOI existed already regardless of its state
   * @throws DoiException if the operation failed for any other reason
   */
  void create(DoiAttributes doi) throws DoiException;

  /**
   * Creates a new draft DOI and updates it already with given metadata
   */
  default void createSilently(DoiAttributes doi) {
    try {
      create(doi);
    } catch (DoiException e) {
      LOG.error("Failed to silently create a new DOI {}", doi.getDoi(), e);
      notifyException(doi.getDoi(), "create", e);
    }
  }

  /**
   * Tries to delete an identifier. If it is still a draft DOI it will be fully deleted.
   * If it was published already, i.e. state=finadable, it will be hidden instead and enter state=registered.
   * Make sure to also update the DOIs url location to an appropriate tombstone page in that case.
   *
   * @param doi the identifier to delete
   * @return true if the DOI was fully deleted, false if it was only hidden
   * @throws DoiException if the operation failed for any reason
   */
  boolean delete(DOI doi) throws DoiException;

  /**
   * Updates a draft or registered DOI to a findable state.
   * @param doi
   */
  void publish(DOI doi) throws DoiException;

  default void publishSilently(DOI doi) {
    try {
      publish(doi);
    } catch (DoiException e) {
      LOG.error("Failed to silently publish DOI {}", doi);
      notifyException(doi, "publish", e);
    }
  }

  /**
   * Updates the identifier metadata attributes. This method must be called every time the object or metadata
   * referenced by the identifier changes (e.g. a dataset gets republished, a dataset is replaced by
   * a new major version, etc).
   *
   * @throws DoiException if the operation failed for any reason
   */
  void update(DoiAttributes doi) throws DoiException;

  default void updateSilently(DoiAttributes doi) {
    try {
      update(doi);
    } catch (DoiException e) {
      LOG.error("Failed to silently update DOI {}", doi.getDoi(), e);
      notifyException(doi.getDoi(), "update", e);
    }
  }

  /**
   * Updates the registered identifier's target URL only.
   *
   * @param doi the identifier of metadata to update
   * @param target the new URL the DOI should resolve to
   * @throws DoiException if the operation failed for any reason
   */
  void update(DOI doi, URI target) throws DoiException;

  default void updateSilently(DOI doi, URI target) {
    try {
      update(doi, target);
    } catch (DoiException e) {
      LOG.error("Failed to silently update target URL {} for DOI {}", target, doi);
      notifyException(doi, "update target URL "+target, e);
    }
  }

  default void notifyException(DOI doi, String action, Exception e) {
    // nothing by default
  }

  static DoiService passThru() {
    return new DoiService() {

      @Override
      public DOI fromDataset(int datasetKey) {
        return DOI.test(String.valueOf(datasetKey));
      }

      @Override
      public DOI fromDatasetSource(int datasetKey, int sourceKey) {
        return DOI.test(String.valueOf(datasetKey) + "-" + String.valueOf(sourceKey));
      }

      @Override
      public DoiAttributes resolve(DOI doi) throws DoiException {
        return null;
      }

      @Override
      public void create(DoiAttributes doi) throws DoiException {
      }

      @Override
      public boolean delete(DOI doi) throws DoiException {
        return false;
      }

      @Override
      public void publish(DOI doi) throws DoiException {
      }

      @Override
      public void update(DoiAttributes doi) throws DoiException {
      }

      @Override
      public void update(DOI doi, URI target) throws DoiException {
      }
    };
  }

}
